// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iris_api_secs.proto

package kz.kase.iris.model;

public final class IrisApiSecs {
  private IrisApiSecs() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Тип ценной бумаги. 
   * </pre>
   *
   * Protobuf enum {@code IRIS.SecType}
   */
  public enum SecType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Акции.
     * </pre>
     *
     * <code>SHARES = 0;</code>
     */
    SHARES(0),
    /**
     * <pre>
     * Облигации.
     * </pre>
     *
     * <code>BONDS = 1;</code>
     */
    BONDS(1),
    /**
     * <pre>
     * ГПА.
     * </pre>
     *
     * <code>SBS = 2;</code>
     */
    SBS(2),
    /**
     * <pre>
     * Паи
     * </pre>
     *
     * <code>UNIT = 3;</code>
     */
    UNIT(3),
    /**
     * <pre>
     * Срочные контракты.
     * </pre>
     *
     * <code>FUTURES = 4;</code>
     */
    FUTURES(4),
    /**
     * <pre>
     * ETF.
     * </pre>
     *
     * <code>ETF = 5;</code>
     */
    ETF(5),
    /**
     * <pre>
     * Депозитарные расписки.
     * </pre>
     *
     * <code>GDR = 7;</code>
     */
    GDR(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Акции.
     * </pre>
     *
     * <code>SHARES = 0;</code>
     */
    public static final int SHARES_VALUE = 0;
    /**
     * <pre>
     * Облигации.
     * </pre>
     *
     * <code>BONDS = 1;</code>
     */
    public static final int BONDS_VALUE = 1;
    /**
     * <pre>
     * ГПА.
     * </pre>
     *
     * <code>SBS = 2;</code>
     */
    public static final int SBS_VALUE = 2;
    /**
     * <pre>
     * Паи
     * </pre>
     *
     * <code>UNIT = 3;</code>
     */
    public static final int UNIT_VALUE = 3;
    /**
     * <pre>
     * Срочные контракты.
     * </pre>
     *
     * <code>FUTURES = 4;</code>
     */
    public static final int FUTURES_VALUE = 4;
    /**
     * <pre>
     * ETF.
     * </pre>
     *
     * <code>ETF = 5;</code>
     */
    public static final int ETF_VALUE = 5;
    /**
     * <pre>
     * Депозитарные расписки.
     * </pre>
     *
     * <code>GDR = 7;</code>
     */
    public static final int GDR_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SecType valueOf(int value) {
      return forNumber(value);
    }

    public static SecType forNumber(int value) {
      switch (value) {
        case 0: return SHARES;
        case 1: return BONDS;
        case 2: return SBS;
        case 3: return UNIT;
        case 4: return FUTURES;
        case 5: return ETF;
        case 7: return GDR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SecType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SecType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SecType>() {
            public SecType findValueByNumber(int number) {
              return SecType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.getDescriptor().getEnumTypes().get(0);
    }

    private static final SecType[] VALUES = values();

    public static SecType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SecType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:IRIS.SecType)
  }

  /**
   * <pre>
   * Торговая площадка. 
   * </pre>
   *
   * Protobuf enum {@code IRIS.TradeArea}
   */
  public enum TradeArea
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * KASE (действующая).
     * </pre>
     *
     * <code>KASE = 0;</code>
     */
    KASE(0),
    /**
     * <pre>
     * РФЦА (исторические данные).
     * </pre>
     *
     * <code>RFCA = 1;</code>
     */
    RFCA(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * KASE (действующая).
     * </pre>
     *
     * <code>KASE = 0;</code>
     */
    public static final int KASE_VALUE = 0;
    /**
     * <pre>
     * РФЦА (исторические данные).
     * </pre>
     *
     * <code>RFCA = 1;</code>
     */
    public static final int RFCA_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TradeArea valueOf(int value) {
      return forNumber(value);
    }

    public static TradeArea forNumber(int value) {
      switch (value) {
        case 0: return KASE;
        case 1: return RFCA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TradeArea>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TradeArea> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TradeArea>() {
            public TradeArea findValueByNumber(int number) {
              return TradeArea.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.getDescriptor().getEnumTypes().get(1);
    }

    private static final TradeArea[] VALUES = values();

    public static TradeArea valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TradeArea(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:IRIS.TradeArea)
  }

  /**
   * <pre>
   * Статус записи с информацией о ценной бумаге. 
   * </pre>
   *
   * Protobuf enum {@code IRIS.SecurityRecordStatus}
   */
  public enum SecurityRecordStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Активная.
     * </pre>
     *
     * <code>SRS_ACTIVE = 0;</code>
     */
    SRS_ACTIVE(0),
    /**
     * <pre>
     * Историческая.
     * </pre>
     *
     * <code>SRS_HISTORY = 1;</code>
     */
    SRS_HISTORY(1),
    /**
     * <pre>
     * Удаленная.
     * </pre>
     *
     * <code>SRS_DELETED = 2;</code>
     */
    SRS_DELETED(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Активная.
     * </pre>
     *
     * <code>SRS_ACTIVE = 0;</code>
     */
    public static final int SRS_ACTIVE_VALUE = 0;
    /**
     * <pre>
     * Историческая.
     * </pre>
     *
     * <code>SRS_HISTORY = 1;</code>
     */
    public static final int SRS_HISTORY_VALUE = 1;
    /**
     * <pre>
     * Удаленная.
     * </pre>
     *
     * <code>SRS_DELETED = 2;</code>
     */
    public static final int SRS_DELETED_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SecurityRecordStatus valueOf(int value) {
      return forNumber(value);
    }

    public static SecurityRecordStatus forNumber(int value) {
      switch (value) {
        case 0: return SRS_ACTIVE;
        case 1: return SRS_HISTORY;
        case 2: return SRS_DELETED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SecurityRecordStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SecurityRecordStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SecurityRecordStatus>() {
            public SecurityRecordStatus findValueByNumber(int number) {
              return SecurityRecordStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.getDescriptor().getEnumTypes().get(2);
    }

    private static final SecurityRecordStatus[] VALUES = values();

    public static SecurityRecordStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SecurityRecordStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:IRIS.SecurityRecordStatus)
  }

  public interface SecurityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.Security)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 security_id = 1;</code>
     */
    int getSecurityId();

    /**
     * <pre>
     * Код ценной бумаги.
     * </pre>
     *
     * <code>string code = 2;</code>
     */
    java.lang.String getCode();
    /**
     * <pre>
     * Код ценной бумаги.
     * </pre>
     *
     * <code>string code = 2;</code>
     */
    com.google.protobuf.ByteString
        getCodeBytes();

    /**
     * <pre>
     * Статус записи с информацией о ценной бумаге.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 3;</code>
     */
    int getStatusValue();
    /**
     * <pre>
     * Статус записи с информацией о ценной бумаге.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 3;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus();

    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 4;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 4;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecType getType();

    /**
     * <pre>
     * Является ли ценная бумага государственной.
     * </pre>
     *
     * <code>bool government = 5;</code>
     */
    boolean getGovernment();

    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    java.util.List<java.lang.Integer> getInstrumentsList();
    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    int getInstrumentsCount();
    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    int getInstruments(int index);

    /**
     * <pre>
     * Внутренняя версия записи в IRIS.
     * </pre>
     *
     * <code>int64 version = 7;</code>
     */
    long getVersion();
  }
  /**
   * <pre>
   * Базовая информация о ценной бумаге. 
   * </pre>
   *
   * Protobuf type {@code IRIS.Security}
   */
  public  static final class Security extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.Security)
      SecurityOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Security.newBuilder() to construct.
    private Security(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Security() {
      securityId_ = 0;
      code_ = "";
      status_ = 0;
      type_ = 0;
      government_ = false;
      instruments_ = java.util.Collections.emptyList();
      version_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Security(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              securityId_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              code_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 40: {

              government_ = input.readBool();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                instruments_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              instruments_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                instruments_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                instruments_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {

              version_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          instruments_ = java.util.Collections.unmodifiableList(instruments_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Security_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Security_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiSecs.Security.class, kz.kase.iris.model.IrisApiSecs.Security.Builder.class);
    }

    private int bitField0_;
    public static final int SECURITY_ID_FIELD_NUMBER = 1;
    private int securityId_;
    /**
     * <pre>
     * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 security_id = 1;</code>
     */
    public int getSecurityId() {
      return securityId_;
    }

    public static final int CODE_FIELD_NUMBER = 2;
    private volatile java.lang.Object code_;
    /**
     * <pre>
     * Код ценной бумаги.
     * </pre>
     *
     * <code>string code = 2;</code>
     */
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        code_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Код ценной бумаги.
     * </pre>
     *
     * <code>string code = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * Статус записи с информацией о ценной бумаге.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 3;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * Статус записи с информацией о ценной бумаге.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 3;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus result = kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.valueOf(status_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.UNRECOGNIZED : result;
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private int type_;
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 4;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 4;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecType getType() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.SecType result = kz.kase.iris.model.IrisApiSecs.SecType.valueOf(type_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.SecType.UNRECOGNIZED : result;
    }

    public static final int GOVERNMENT_FIELD_NUMBER = 5;
    private boolean government_;
    /**
     * <pre>
     * Является ли ценная бумага государственной.
     * </pre>
     *
     * <code>bool government = 5;</code>
     */
    public boolean getGovernment() {
      return government_;
    }

    public static final int INSTRUMENTS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> instruments_;
    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getInstrumentsList() {
      return instruments_;
    }
    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    public int getInstrumentsCount() {
      return instruments_.size();
    }
    /**
     * <pre>
     * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>repeated int32 instruments = 6;</code>
     */
    public int getInstruments(int index) {
      return instruments_.get(index);
    }
    private int instrumentsMemoizedSerializedSize = -1;

    public static final int VERSION_FIELD_NUMBER = 7;
    private long version_;
    /**
     * <pre>
     * Внутренняя версия записи в IRIS.
     * </pre>
     *
     * <code>int64 version = 7;</code>
     */
    public long getVersion() {
      return version_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (securityId_ != 0) {
        output.writeInt32(1, securityId_);
      }
      if (!getCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, code_);
      }
      if (status_ != kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.SRS_ACTIVE.getNumber()) {
        output.writeEnum(3, status_);
      }
      if (type_ != kz.kase.iris.model.IrisApiSecs.SecType.SHARES.getNumber()) {
        output.writeEnum(4, type_);
      }
      if (government_ != false) {
        output.writeBool(5, government_);
      }
      if (getInstrumentsList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(instrumentsMemoizedSerializedSize);
      }
      for (int i = 0; i < instruments_.size(); i++) {
        output.writeInt32NoTag(instruments_.get(i));
      }
      if (version_ != 0L) {
        output.writeInt64(7, version_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (securityId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, securityId_);
      }
      if (!getCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, code_);
      }
      if (status_ != kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.SRS_ACTIVE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      if (type_ != kz.kase.iris.model.IrisApiSecs.SecType.SHARES.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, type_);
      }
      if (government_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, government_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < instruments_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(instruments_.get(i));
        }
        size += dataSize;
        if (!getInstrumentsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        instrumentsMemoizedSerializedSize = dataSize;
      }
      if (version_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, version_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiSecs.Security)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiSecs.Security other = (kz.kase.iris.model.IrisApiSecs.Security) obj;

      boolean result = true;
      result = result && (getSecurityId()
          == other.getSecurityId());
      result = result && getCode()
          .equals(other.getCode());
      result = result && status_ == other.status_;
      result = result && type_ == other.type_;
      result = result && (getGovernment()
          == other.getGovernment());
      result = result && getInstrumentsList()
          .equals(other.getInstrumentsList());
      result = result && (getVersion()
          == other.getVersion());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SECURITY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSecurityId();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode().hashCode();
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + GOVERNMENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGovernment());
      if (getInstrumentsCount() > 0) {
        hash = (37 * hash) + INSTRUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getInstrumentsList().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVersion());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Security parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiSecs.Security prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Базовая информация о ценной бумаге. 
     * </pre>
     *
     * Protobuf type {@code IRIS.Security}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.Security)
        kz.kase.iris.model.IrisApiSecs.SecurityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Security_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Security_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiSecs.Security.class, kz.kase.iris.model.IrisApiSecs.Security.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiSecs.Security.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        securityId_ = 0;

        code_ = "";

        status_ = 0;

        type_ = 0;

        government_ = false;

        instruments_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        version_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Security_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Security getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiSecs.Security.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Security build() {
        kz.kase.iris.model.IrisApiSecs.Security result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Security buildPartial() {
        kz.kase.iris.model.IrisApiSecs.Security result = new kz.kase.iris.model.IrisApiSecs.Security(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.securityId_ = securityId_;
        result.code_ = code_;
        result.status_ = status_;
        result.type_ = type_;
        result.government_ = government_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          instruments_ = java.util.Collections.unmodifiableList(instruments_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.instruments_ = instruments_;
        result.version_ = version_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiSecs.Security) {
          return mergeFrom((kz.kase.iris.model.IrisApiSecs.Security)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiSecs.Security other) {
        if (other == kz.kase.iris.model.IrisApiSecs.Security.getDefaultInstance()) return this;
        if (other.getSecurityId() != 0) {
          setSecurityId(other.getSecurityId());
        }
        if (!other.getCode().isEmpty()) {
          code_ = other.code_;
          onChanged();
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getGovernment() != false) {
          setGovernment(other.getGovernment());
        }
        if (!other.instruments_.isEmpty()) {
          if (instruments_.isEmpty()) {
            instruments_ = other.instruments_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureInstrumentsIsMutable();
            instruments_.addAll(other.instruments_);
          }
          onChanged();
        }
        if (other.getVersion() != 0L) {
          setVersion(other.getVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiSecs.Security parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiSecs.Security) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int securityId_ ;
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 1;</code>
       */
      public int getSecurityId() {
        return securityId_;
      }
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 1;</code>
       */
      public Builder setSecurityId(int value) {
        
        securityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 1;</code>
       */
      public Builder clearSecurityId() {
        
        securityId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object code_ = "";
      /**
       * <pre>
       * Код ценной бумаги.
       * </pre>
       *
       * <code>string code = 2;</code>
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Код ценной бумаги.
       * </pre>
       *
       * <code>string code = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Код ценной бумаги.
       * </pre>
       *
       * <code>string code = 2;</code>
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код ценной бумаги.
       * </pre>
       *
       * <code>string code = 2;</code>
       */
      public Builder clearCode() {
        
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код ценной бумаги.
       * </pre>
       *
       * <code>string code = 2;</code>
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        code_ = value;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * Статус записи с информацией о ценной бумаге.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 3;</code>
       */
      public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * Статус записи с информацией о ценной бумаге.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder setStatusValue(int value) {
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Статус записи с информацией о ценной бумаге.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 3;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus result = kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.valueOf(status_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Статус записи с информацией о ценной бумаге.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder setStatus(kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Статус записи с информацией о ценной бумаге.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 4;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 4;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 4;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecType getType() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.SecType result = kz.kase.iris.model.IrisApiSecs.SecType.valueOf(type_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.SecType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 4;</code>
       */
      public Builder setType(kz.kase.iris.model.IrisApiSecs.SecType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 4;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private boolean government_ ;
      /**
       * <pre>
       * Является ли ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public boolean getGovernment() {
        return government_;
      }
      /**
       * <pre>
       * Является ли ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public Builder setGovernment(boolean value) {
        
        government_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Является ли ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public Builder clearGovernment() {
        
        government_ = false;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> instruments_ = java.util.Collections.emptyList();
      private void ensureInstrumentsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          instruments_ = new java.util.ArrayList<java.lang.Integer>(instruments_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getInstrumentsList() {
        return java.util.Collections.unmodifiableList(instruments_);
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public int getInstrumentsCount() {
        return instruments_.size();
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public int getInstruments(int index) {
        return instruments_.get(index);
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public Builder setInstruments(
          int index, int value) {
        ensureInstrumentsIsMutable();
        instruments_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public Builder addInstruments(int value) {
        ensureInstrumentsIsMutable();
        instruments_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public Builder addAllInstruments(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInstrumentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, instruments_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичные ключи записей инструментов в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>repeated int32 instruments = 6;</code>
       */
      public Builder clearInstruments() {
        instruments_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private long version_ ;
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 7;</code>
       */
      public long getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 7;</code>
       */
      public Builder setVersion(long value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 7;</code>
       */
      public Builder clearVersion() {
        
        version_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.Security)
    }

    // @@protoc_insertion_point(class_scope:IRIS.Security)
    private static final kz.kase.iris.model.IrisApiSecs.Security DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiSecs.Security();
    }

    public static kz.kase.iris.model.IrisApiSecs.Security getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Security>
        PARSER = new com.google.protobuf.AbstractParser<Security>() {
      @java.lang.Override
      public Security parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Security(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Security> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Security> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiSecs.Security getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.Instrument)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 instrument_id = 1;</code>
     */
    int getInstrumentId();

    /**
     * <pre>
     * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 security_id = 2;</code>
     */
    int getSecurityId();

    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string code = 3;</code>
     */
    java.lang.String getCode();
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string code = 3;</code>
     */
    com.google.protobuf.ByteString
        getCodeBytes();

    /**
     * <pre>
     * Статус записи с информацией об инструменте.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 4;</code>
     */
    int getStatusValue();
    /**
     * <pre>
     * Статус записи с информацией об инструменте.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 4;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus();

    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 5;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 5;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecType getType();

    /**
     * <pre>
     * Торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    int getTradeAreaValue();
    /**
     * <pre>
     * Торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea();

    /**
     * <pre>
     * Является ли торгуемая ценная бумага государственной.
     * </pre>
     *
     * <code>bool government = 7;</code>
     */
    boolean getGovernment();

    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    boolean hasIssuerInfo();
    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    kz.kase.iris.model.IrisApiIssuers.Issuer getIssuerInfo();
    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder getIssuerInfoOrBuilder();

    /**
     * <pre>
     * Внутренняя версия записи в IRIS.
     * </pre>
     *
     * <code>int64 version = 9;</code>
     */
    long getVersion();
  }
  /**
   * <pre>
   * Базовая информация об инструменте. 
   * </pre>
   *
   * Protobuf type {@code IRIS.Instrument}
   */
  public  static final class Instrument extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.Instrument)
      InstrumentOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Instrument.newBuilder() to construct.
    private Instrument(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Instrument() {
      instrumentId_ = 0;
      securityId_ = 0;
      code_ = "";
      status_ = 0;
      type_ = 0;
      tradeArea_ = 0;
      government_ = false;
      version_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Instrument(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              instrumentId_ = input.readInt32();
              break;
            }
            case 16: {

              securityId_ = input.readInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              code_ = s;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              tradeArea_ = rawValue;
              break;
            }
            case 56: {

              government_ = input.readBool();
              break;
            }
            case 66: {
              kz.kase.iris.model.IrisApiIssuers.Issuer.Builder subBuilder = null;
              if (issuerInfo_ != null) {
                subBuilder = issuerInfo_.toBuilder();
              }
              issuerInfo_ = input.readMessage(kz.kase.iris.model.IrisApiIssuers.Issuer.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(issuerInfo_);
                issuerInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 72: {

              version_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Instrument_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Instrument_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiSecs.Instrument.class, kz.kase.iris.model.IrisApiSecs.Instrument.Builder.class);
    }

    public static final int INSTRUMENT_ID_FIELD_NUMBER = 1;
    private int instrumentId_;
    /**
     * <pre>
     * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 instrument_id = 1;</code>
     */
    public int getInstrumentId() {
      return instrumentId_;
    }

    public static final int SECURITY_ID_FIELD_NUMBER = 2;
    private int securityId_;
    /**
     * <pre>
     * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 security_id = 2;</code>
     */
    public int getSecurityId() {
      return securityId_;
    }

    public static final int CODE_FIELD_NUMBER = 3;
    private volatile java.lang.Object code_;
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string code = 3;</code>
     */
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        code_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string code = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 4;
    private int status_;
    /**
     * <pre>
     * Статус записи с информацией об инструменте.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 4;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * Статус записи с информацией об инструменте.
     * </pre>
     *
     * <code>.IRIS.SecurityRecordStatus status = 4;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus result = kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.valueOf(status_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.UNRECOGNIZED : result;
    }

    public static final int TYPE_FIELD_NUMBER = 5;
    private int type_;
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 5;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Тип ценной бумаги.
     * </pre>
     *
     * <code>.IRIS.SecType type = 5;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecType getType() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.SecType result = kz.kase.iris.model.IrisApiSecs.SecType.valueOf(type_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.SecType.UNRECOGNIZED : result;
    }

    public static final int TRADE_AREA_FIELD_NUMBER = 6;
    private int tradeArea_;
    /**
     * <pre>
     * Торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    public int getTradeAreaValue() {
      return tradeArea_;
    }
    /**
     * <pre>
     * Торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.TradeArea result = kz.kase.iris.model.IrisApiSecs.TradeArea.valueOf(tradeArea_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.TradeArea.UNRECOGNIZED : result;
    }

    public static final int GOVERNMENT_FIELD_NUMBER = 7;
    private boolean government_;
    /**
     * <pre>
     * Является ли торгуемая ценная бумага государственной.
     * </pre>
     *
     * <code>bool government = 7;</code>
     */
    public boolean getGovernment() {
      return government_;
    }

    public static final int ISSUER_INFO_FIELD_NUMBER = 8;
    private kz.kase.iris.model.IrisApiIssuers.Issuer issuerInfo_;
    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    public boolean hasIssuerInfo() {
      return issuerInfo_ != null;
    }
    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    public kz.kase.iris.model.IrisApiIssuers.Issuer getIssuerInfo() {
      return issuerInfo_ == null ? kz.kase.iris.model.IrisApiIssuers.Issuer.getDefaultInstance() : issuerInfo_;
    }
    /**
     * <pre>
     * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
     * </pre>
     *
     * <code>.IRIS.Issuer issuer_info = 8;</code>
     */
    public kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder getIssuerInfoOrBuilder() {
      return getIssuerInfo();
    }

    public static final int VERSION_FIELD_NUMBER = 9;
    private long version_;
    /**
     * <pre>
     * Внутренняя версия записи в IRIS.
     * </pre>
     *
     * <code>int64 version = 9;</code>
     */
    public long getVersion() {
      return version_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (instrumentId_ != 0) {
        output.writeInt32(1, instrumentId_);
      }
      if (securityId_ != 0) {
        output.writeInt32(2, securityId_);
      }
      if (!getCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, code_);
      }
      if (status_ != kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.SRS_ACTIVE.getNumber()) {
        output.writeEnum(4, status_);
      }
      if (type_ != kz.kase.iris.model.IrisApiSecs.SecType.SHARES.getNumber()) {
        output.writeEnum(5, type_);
      }
      if (tradeArea_ != kz.kase.iris.model.IrisApiSecs.TradeArea.KASE.getNumber()) {
        output.writeEnum(6, tradeArea_);
      }
      if (government_ != false) {
        output.writeBool(7, government_);
      }
      if (issuerInfo_ != null) {
        output.writeMessage(8, getIssuerInfo());
      }
      if (version_ != 0L) {
        output.writeInt64(9, version_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (instrumentId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, instrumentId_);
      }
      if (securityId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, securityId_);
      }
      if (!getCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, code_);
      }
      if (status_ != kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.SRS_ACTIVE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, status_);
      }
      if (type_ != kz.kase.iris.model.IrisApiSecs.SecType.SHARES.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, type_);
      }
      if (tradeArea_ != kz.kase.iris.model.IrisApiSecs.TradeArea.KASE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, tradeArea_);
      }
      if (government_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, government_);
      }
      if (issuerInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getIssuerInfo());
      }
      if (version_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, version_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiSecs.Instrument)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiSecs.Instrument other = (kz.kase.iris.model.IrisApiSecs.Instrument) obj;

      boolean result = true;
      result = result && (getInstrumentId()
          == other.getInstrumentId());
      result = result && (getSecurityId()
          == other.getSecurityId());
      result = result && getCode()
          .equals(other.getCode());
      result = result && status_ == other.status_;
      result = result && type_ == other.type_;
      result = result && tradeArea_ == other.tradeArea_;
      result = result && (getGovernment()
          == other.getGovernment());
      result = result && (hasIssuerInfo() == other.hasIssuerInfo());
      if (hasIssuerInfo()) {
        result = result && getIssuerInfo()
            .equals(other.getIssuerInfo());
      }
      result = result && (getVersion()
          == other.getVersion());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUMENT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstrumentId();
      hash = (37 * hash) + SECURITY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSecurityId();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode().hashCode();
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + TRADE_AREA_FIELD_NUMBER;
      hash = (53 * hash) + tradeArea_;
      hash = (37 * hash) + GOVERNMENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGovernment());
      if (hasIssuerInfo()) {
        hash = (37 * hash) + ISSUER_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getIssuerInfo().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVersion());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.Instrument parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiSecs.Instrument prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Базовая информация об инструменте. 
     * </pre>
     *
     * Protobuf type {@code IRIS.Instrument}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.Instrument)
        kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Instrument_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Instrument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiSecs.Instrument.class, kz.kase.iris.model.IrisApiSecs.Instrument.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiSecs.Instrument.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instrumentId_ = 0;

        securityId_ = 0;

        code_ = "";

        status_ = 0;

        type_ = 0;

        tradeArea_ = 0;

        government_ = false;

        if (issuerInfoBuilder_ == null) {
          issuerInfo_ = null;
        } else {
          issuerInfo_ = null;
          issuerInfoBuilder_ = null;
        }
        version_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_Instrument_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Instrument getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiSecs.Instrument.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Instrument build() {
        kz.kase.iris.model.IrisApiSecs.Instrument result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.Instrument buildPartial() {
        kz.kase.iris.model.IrisApiSecs.Instrument result = new kz.kase.iris.model.IrisApiSecs.Instrument(this);
        result.instrumentId_ = instrumentId_;
        result.securityId_ = securityId_;
        result.code_ = code_;
        result.status_ = status_;
        result.type_ = type_;
        result.tradeArea_ = tradeArea_;
        result.government_ = government_;
        if (issuerInfoBuilder_ == null) {
          result.issuerInfo_ = issuerInfo_;
        } else {
          result.issuerInfo_ = issuerInfoBuilder_.build();
        }
        result.version_ = version_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiSecs.Instrument) {
          return mergeFrom((kz.kase.iris.model.IrisApiSecs.Instrument)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiSecs.Instrument other) {
        if (other == kz.kase.iris.model.IrisApiSecs.Instrument.getDefaultInstance()) return this;
        if (other.getInstrumentId() != 0) {
          setInstrumentId(other.getInstrumentId());
        }
        if (other.getSecurityId() != 0) {
          setSecurityId(other.getSecurityId());
        }
        if (!other.getCode().isEmpty()) {
          code_ = other.code_;
          onChanged();
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.tradeArea_ != 0) {
          setTradeAreaValue(other.getTradeAreaValue());
        }
        if (other.getGovernment() != false) {
          setGovernment(other.getGovernment());
        }
        if (other.hasIssuerInfo()) {
          mergeIssuerInfo(other.getIssuerInfo());
        }
        if (other.getVersion() != 0L) {
          setVersion(other.getVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiSecs.Instrument parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiSecs.Instrument) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int instrumentId_ ;
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public int getInstrumentId() {
        return instrumentId_;
      }
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public Builder setInstrumentId(int value) {
        
        instrumentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public Builder clearInstrumentId() {
        
        instrumentId_ = 0;
        onChanged();
        return this;
      }

      private int securityId_ ;
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 2;</code>
       */
      public int getSecurityId() {
        return securityId_;
      }
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 2;</code>
       */
      public Builder setSecurityId(int value) {
        
        securityId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичный ключ записи ценной бумаги в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 security_id = 2;</code>
       */
      public Builder clearSecurityId() {
        
        securityId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object code_ = "";
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string code = 3;</code>
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string code = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string code = 3;</code>
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string code = 3;</code>
       */
      public Builder clearCode() {
        
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string code = 3;</code>
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        code_ = value;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * Статус записи с информацией об инструменте.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 4;</code>
       */
      public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * Статус записи с информацией об инструменте.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 4;</code>
       */
      public Builder setStatusValue(int value) {
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Статус записи с информацией об инструменте.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 4;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus result = kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.valueOf(status_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Статус записи с информацией об инструменте.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 4;</code>
       */
      public Builder setStatus(kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Статус записи с информацией об инструменте.
       * </pre>
       *
       * <code>.IRIS.SecurityRecordStatus status = 4;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 5;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 5;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 5;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecType getType() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.SecType result = kz.kase.iris.model.IrisApiSecs.SecType.valueOf(type_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.SecType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 5;</code>
       */
      public Builder setType(kz.kase.iris.model.IrisApiSecs.SecType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Тип ценной бумаги.
       * </pre>
       *
       * <code>.IRIS.SecType type = 5;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private int tradeArea_ = 0;
      /**
       * <pre>
       * Торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public int getTradeAreaValue() {
        return tradeArea_;
      }
      /**
       * <pre>
       * Торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder setTradeAreaValue(int value) {
        tradeArea_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.TradeArea result = kz.kase.iris.model.IrisApiSecs.TradeArea.valueOf(tradeArea_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.TradeArea.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder setTradeArea(kz.kase.iris.model.IrisApiSecs.TradeArea value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        tradeArea_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder clearTradeArea() {
        
        tradeArea_ = 0;
        onChanged();
        return this;
      }

      private boolean government_ ;
      /**
       * <pre>
       * Является ли торгуемая ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 7;</code>
       */
      public boolean getGovernment() {
        return government_;
      }
      /**
       * <pre>
       * Является ли торгуемая ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 7;</code>
       */
      public Builder setGovernment(boolean value) {
        
        government_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Является ли торгуемая ценная бумага государственной.
       * </pre>
       *
       * <code>bool government = 7;</code>
       */
      public Builder clearGovernment() {
        
        government_ = false;
        onChanged();
        return this;
      }

      private kz.kase.iris.model.IrisApiIssuers.Issuer issuerInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiIssuers.Issuer, kz.kase.iris.model.IrisApiIssuers.Issuer.Builder, kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder> issuerInfoBuilder_;
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public boolean hasIssuerInfo() {
        return issuerInfoBuilder_ != null || issuerInfo_ != null;
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public kz.kase.iris.model.IrisApiIssuers.Issuer getIssuerInfo() {
        if (issuerInfoBuilder_ == null) {
          return issuerInfo_ == null ? kz.kase.iris.model.IrisApiIssuers.Issuer.getDefaultInstance() : issuerInfo_;
        } else {
          return issuerInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public Builder setIssuerInfo(kz.kase.iris.model.IrisApiIssuers.Issuer value) {
        if (issuerInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          issuerInfo_ = value;
          onChanged();
        } else {
          issuerInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public Builder setIssuerInfo(
          kz.kase.iris.model.IrisApiIssuers.Issuer.Builder builderForValue) {
        if (issuerInfoBuilder_ == null) {
          issuerInfo_ = builderForValue.build();
          onChanged();
        } else {
          issuerInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public Builder mergeIssuerInfo(kz.kase.iris.model.IrisApiIssuers.Issuer value) {
        if (issuerInfoBuilder_ == null) {
          if (issuerInfo_ != null) {
            issuerInfo_ =
              kz.kase.iris.model.IrisApiIssuers.Issuer.newBuilder(issuerInfo_).mergeFrom(value).buildPartial();
          } else {
            issuerInfo_ = value;
          }
          onChanged();
        } else {
          issuerInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public Builder clearIssuerInfo() {
        if (issuerInfoBuilder_ == null) {
          issuerInfo_ = null;
          onChanged();
        } else {
          issuerInfo_ = null;
          issuerInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public kz.kase.iris.model.IrisApiIssuers.Issuer.Builder getIssuerInfoBuilder() {
        
        onChanged();
        return getIssuerInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      public kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder getIssuerInfoOrBuilder() {
        if (issuerInfoBuilder_ != null) {
          return issuerInfoBuilder_.getMessageOrBuilder();
        } else {
          return issuerInfo_ == null ?
              kz.kase.iris.model.IrisApiIssuers.Issuer.getDefaultInstance() : issuerInfo_;
        }
      }
      /**
       * <pre>
       * Информация об эмитенте. Заполняется только в случае если была явно запрошена (см. поле include_issuer_info в &lt;link linkend=".IRIS.InstrumentsRequest"&gt;InstrumentsRequest&lt;/link&gt;).
       * </pre>
       *
       * <code>.IRIS.Issuer issuer_info = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiIssuers.Issuer, kz.kase.iris.model.IrisApiIssuers.Issuer.Builder, kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder> 
          getIssuerInfoFieldBuilder() {
        if (issuerInfoBuilder_ == null) {
          issuerInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiIssuers.Issuer, kz.kase.iris.model.IrisApiIssuers.Issuer.Builder, kz.kase.iris.model.IrisApiIssuers.IssuerOrBuilder>(
                  getIssuerInfo(),
                  getParentForChildren(),
                  isClean());
          issuerInfo_ = null;
        }
        return issuerInfoBuilder_;
      }

      private long version_ ;
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 9;</code>
       */
      public long getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 9;</code>
       */
      public Builder setVersion(long value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Внутренняя версия записи в IRIS.
       * </pre>
       *
       * <code>int64 version = 9;</code>
       */
      public Builder clearVersion() {
        
        version_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.Instrument)
    }

    // @@protoc_insertion_point(class_scope:IRIS.Instrument)
    private static final kz.kase.iris.model.IrisApiSecs.Instrument DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiSecs.Instrument();
    }

    public static kz.kase.iris.model.IrisApiSecs.Instrument getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Instrument>
        PARSER = new com.google.protobuf.AbstractParser<Instrument>() {
      @java.lang.Override
      public Instrument parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Instrument(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Instrument> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Instrument> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiSecs.Instrument getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentsFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.InstrumentsFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    java.util.List<java.lang.String>
        getCodesList();
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    int getCodesCount();
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    java.lang.String getCodes(int index);
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    com.google.protobuf.ByteString
        getCodesBytes(int index);

    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    java.util.List<java.lang.Integer> getIdsList();
    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    int getIdsCount();
    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    int getIds(int index);

    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    java.util.List<kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus> getStatusList();
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    int getStatusCount();
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus(int index);
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    java.util.List<java.lang.Integer>
    getStatusValueList();
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    int getStatusValue(int index);

    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    java.util.List<kz.kase.iris.model.IrisApiSecs.SecType> getSecTypeList();
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    int getSecTypeCount();
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    kz.kase.iris.model.IrisApiSecs.SecType getSecType(int index);
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    java.util.List<java.lang.Integer>
    getSecTypeValueList();
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    int getSecTypeValue(int index);

    /**
     * <pre>
     * Запрос на выдачу только государственных ценных бумаг.
     * </pre>
     *
     * <code>bool government = 5;</code>
     */
    boolean getGovernment();

    /**
     * <pre>
     * Требуемая торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    int getTradeAreaValue();
    /**
     * <pre>
     * Требуемая торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea();
  }
  /**
   * <pre>
   * Информация для фильтрации списка ценных бумаг и инструментов. 
   * </pre>
   *
   * Protobuf type {@code IRIS.InstrumentsFilter}
   */
  public  static final class InstrumentsFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.InstrumentsFilter)
      InstrumentsFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentsFilter.newBuilder() to construct.
    private InstrumentsFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentsFilter() {
      codes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      ids_ = java.util.Collections.emptyList();
      status_ = java.util.Collections.emptyList();
      secType_ = java.util.Collections.emptyList();
      government_ = false;
      tradeArea_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstrumentsFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                codes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              codes_.add(s);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                ids_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              ids_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                ids_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                ids_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                status_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              status_.add(rawValue);
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  status_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                status_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                secType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              secType_.add(rawValue);
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  secType_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                secType_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 40: {

              government_ = input.readBool();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              tradeArea_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          codes_ = codes_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          ids_ = java.util.Collections.unmodifiableList(ids_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          status_ = java.util.Collections.unmodifiableList(status_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          secType_ = java.util.Collections.unmodifiableList(secType_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.class, kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder.class);
    }

    private int bitField0_;
    public static final int CODES_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList codes_;
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCodesList() {
      return codes_;
    }
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    public int getCodesCount() {
      return codes_.size();
    }
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    public java.lang.String getCodes(int index) {
      return codes_.get(index);
    }
    /**
     * <pre>
     * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
     * </pre>
     *
     * <code>repeated string codes = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCodesBytes(int index) {
      return codes_.getByteString(index);
    }

    public static final int IDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> ids_;
    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getIdsList() {
      return ids_;
    }
    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    public int getIdsCount() {
      return ids_.size();
    }
    /**
     * <pre>
     * Список требуемых для загрузки первичных ключей.
     * </pre>
     *
     * <code>repeated int32 ids = 2;</code>
     */
    public int getIds(int index) {
      return ids_.get(index);
    }
    private int idsMemoizedSerializedSize = -1;

    public static final int STATUS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> status_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus> status_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus>() {
              public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus result = kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.valueOf(from);
                return result == null ? kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    public java.util.List<kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus> getStatusList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus>(status_, status_converter_);
    }
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    public int getStatusCount() {
      return status_.size();
    }
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus(int index) {
      return status_converter_.convert(status_.get(index));
    }
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getStatusValueList() {
      return status_;
    }
    /**
     * <pre>
     * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
     * </pre>
     *
     * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
     */
    public int getStatusValue(int index) {
      return status_.get(index);
    }
    private int statusMemoizedSerializedSize;

    public static final int SEC_TYPE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> secType_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecType> secType_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecType>() {
              public kz.kase.iris.model.IrisApiSecs.SecType convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                kz.kase.iris.model.IrisApiSecs.SecType result = kz.kase.iris.model.IrisApiSecs.SecType.valueOf(from);
                return result == null ? kz.kase.iris.model.IrisApiSecs.SecType.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    public java.util.List<kz.kase.iris.model.IrisApiSecs.SecType> getSecTypeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecType>(secType_, secType_converter_);
    }
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    public int getSecTypeCount() {
      return secType_.size();
    }
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.SecType getSecType(int index) {
      return secType_converter_.convert(secType_.get(index));
    }
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    public java.util.List<java.lang.Integer>
    getSecTypeValueList() {
      return secType_;
    }
    /**
     * <pre>
     * Список требуемых типов ценных бумаг.
     * </pre>
     *
     * <code>repeated .IRIS.SecType sec_type = 4;</code>
     */
    public int getSecTypeValue(int index) {
      return secType_.get(index);
    }
    private int secTypeMemoizedSerializedSize;

    public static final int GOVERNMENT_FIELD_NUMBER = 5;
    private boolean government_;
    /**
     * <pre>
     * Запрос на выдачу только государственных ценных бумаг.
     * </pre>
     *
     * <code>bool government = 5;</code>
     */
    public boolean getGovernment() {
      return government_;
    }

    public static final int TRADE_AREA_FIELD_NUMBER = 6;
    private int tradeArea_;
    /**
     * <pre>
     * Требуемая торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    public int getTradeAreaValue() {
      return tradeArea_;
    }
    /**
     * <pre>
     * Требуемая торговая площадка.
     * </pre>
     *
     * <code>.IRIS.TradeArea trade_area = 6;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea() {
      @SuppressWarnings("deprecation")
      kz.kase.iris.model.IrisApiSecs.TradeArea result = kz.kase.iris.model.IrisApiSecs.TradeArea.valueOf(tradeArea_);
      return result == null ? kz.kase.iris.model.IrisApiSecs.TradeArea.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < codes_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, codes_.getRaw(i));
      }
      if (getIdsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(idsMemoizedSerializedSize);
      }
      for (int i = 0; i < ids_.size(); i++) {
        output.writeInt32NoTag(ids_.get(i));
      }
      if (getStatusList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(statusMemoizedSerializedSize);
      }
      for (int i = 0; i < status_.size(); i++) {
        output.writeEnumNoTag(status_.get(i));
      }
      if (getSecTypeList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(secTypeMemoizedSerializedSize);
      }
      for (int i = 0; i < secType_.size(); i++) {
        output.writeEnumNoTag(secType_.get(i));
      }
      if (government_ != false) {
        output.writeBool(5, government_);
      }
      if (tradeArea_ != kz.kase.iris.model.IrisApiSecs.TradeArea.KASE.getNumber()) {
        output.writeEnum(6, tradeArea_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < codes_.size(); i++) {
          dataSize += computeStringSizeNoTag(codes_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCodesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(ids_.get(i));
        }
        size += dataSize;
        if (!getIdsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        idsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < status_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(status_.get(i));
        }
        size += dataSize;
        if (!getStatusList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }statusMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < secType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(secType_.get(i));
        }
        size += dataSize;
        if (!getSecTypeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }secTypeMemoizedSerializedSize = dataSize;
      }
      if (government_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, government_);
      }
      if (tradeArea_ != kz.kase.iris.model.IrisApiSecs.TradeArea.KASE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, tradeArea_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsFilter)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiSecs.InstrumentsFilter other = (kz.kase.iris.model.IrisApiSecs.InstrumentsFilter) obj;

      boolean result = true;
      result = result && getCodesList()
          .equals(other.getCodesList());
      result = result && getIdsList()
          .equals(other.getIdsList());
      result = result && status_.equals(other.status_);
      result = result && secType_.equals(other.secType_);
      result = result && (getGovernment()
          == other.getGovernment());
      result = result && tradeArea_ == other.tradeArea_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCodesCount() > 0) {
        hash = (37 * hash) + CODES_FIELD_NUMBER;
        hash = (53 * hash) + getCodesList().hashCode();
      }
      if (getIdsCount() > 0) {
        hash = (37 * hash) + IDS_FIELD_NUMBER;
        hash = (53 * hash) + getIdsList().hashCode();
      }
      if (getStatusCount() > 0) {
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + status_.hashCode();
      }
      if (getSecTypeCount() > 0) {
        hash = (37 * hash) + SEC_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + secType_.hashCode();
      }
      hash = (37 * hash) + GOVERNMENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGovernment());
      hash = (37 * hash) + TRADE_AREA_FIELD_NUMBER;
      hash = (53 * hash) + tradeArea_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiSecs.InstrumentsFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Информация для фильтрации списка ценных бумаг и инструментов. 
     * </pre>
     *
     * Protobuf type {@code IRIS.InstrumentsFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.InstrumentsFilter)
        kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.class, kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        codes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        ids_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        secType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        government_ = false;

        tradeArea_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsFilter_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter build() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter buildPartial() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsFilter result = new kz.kase.iris.model.IrisApiSecs.InstrumentsFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          codes_ = codes_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.codes_ = codes_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          ids_ = java.util.Collections.unmodifiableList(ids_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.ids_ = ids_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          status_ = java.util.Collections.unmodifiableList(status_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.status_ = status_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          secType_ = java.util.Collections.unmodifiableList(secType_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.secType_ = secType_;
        result.government_ = government_;
        result.tradeArea_ = tradeArea_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsFilter) {
          return mergeFrom((kz.kase.iris.model.IrisApiSecs.InstrumentsFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiSecs.InstrumentsFilter other) {
        if (other == kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.getDefaultInstance()) return this;
        if (!other.codes_.isEmpty()) {
          if (codes_.isEmpty()) {
            codes_ = other.codes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCodesIsMutable();
            codes_.addAll(other.codes_);
          }
          onChanged();
        }
        if (!other.ids_.isEmpty()) {
          if (ids_.isEmpty()) {
            ids_ = other.ids_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIdsIsMutable();
            ids_.addAll(other.ids_);
          }
          onChanged();
        }
        if (!other.status_.isEmpty()) {
          if (status_.isEmpty()) {
            status_ = other.status_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStatusIsMutable();
            status_.addAll(other.status_);
          }
          onChanged();
        }
        if (!other.secType_.isEmpty()) {
          if (secType_.isEmpty()) {
            secType_ = other.secType_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSecTypeIsMutable();
            secType_.addAll(other.secType_);
          }
          onChanged();
        }
        if (other.getGovernment() != false) {
          setGovernment(other.getGovernment());
        }
        if (other.tradeArea_ != 0) {
          setTradeAreaValue(other.getTradeAreaValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiSecs.InstrumentsFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiSecs.InstrumentsFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList codes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCodesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          codes_ = new com.google.protobuf.LazyStringArrayList(codes_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCodesList() {
        return codes_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public int getCodesCount() {
        return codes_.size();
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public java.lang.String getCodes(int index) {
        return codes_.get(index);
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCodesBytes(int index) {
        return codes_.getByteString(index);
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public Builder setCodes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCodesIsMutable();
        codes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public Builder addCodes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCodesIsMutable();
        codes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public Builder addAllCodes(
          java.lang.Iterable<java.lang.String> values) {
        ensureCodesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, codes_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public Builder clearCodes() {
        codes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки кодов ценных бумаг и инструментов. Для фильтрации могут передаваться как коды, так и шаблоны (см. &lt;xref linkend="section_filter_templates"/&gt;).
       * </pre>
       *
       * <code>repeated string codes = 1;</code>
       */
      public Builder addCodesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureCodesIsMutable();
        codes_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> ids_ = java.util.Collections.emptyList();
      private void ensureIdsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          ids_ = new java.util.ArrayList<java.lang.Integer>(ids_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getIdsList() {
        return java.util.Collections.unmodifiableList(ids_);
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public int getIdsCount() {
        return ids_.size();
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public int getIds(int index) {
        return ids_.get(index);
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public Builder setIds(
          int index, int value) {
        ensureIdsIsMutable();
        ids_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public Builder addIds(int value) {
        ensureIdsIsMutable();
        ids_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public Builder addAllIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ids_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых для загрузки первичных ключей.
       * </pre>
       *
       * <code>repeated int32 ids = 2;</code>
       */
      public Builder clearIds() {
        ids_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> status_ =
        java.util.Collections.emptyList();
      private void ensureStatusIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          status_ = new java.util.ArrayList<java.lang.Integer>(status_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus> getStatusList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus>(status_, status_converter_);
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public int getStatusCount() {
        return status_.size();
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus getStatus(int index) {
        return status_converter_.convert(status_.get(index));
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder setStatus(
          int index, kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatusIsMutable();
        status_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder addStatus(kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatusIsMutable();
        status_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder addAllStatus(
          java.lang.Iterable<? extends kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus> values) {
        ensureStatusIsMutable();
        for (kz.kase.iris.model.IrisApiSecs.SecurityRecordStatus value : values) {
          status_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder clearStatus() {
        status_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getStatusValueList() {
        return java.util.Collections.unmodifiableList(status_);
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public int getStatusValue(int index) {
        return status_.get(index);
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder setStatusValue(
          int index, int value) {
        ensureStatusIsMutable();
        status_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder addStatusValue(int value) {
        ensureStatusIsMutable();
        status_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых статусов записей. В случае если список пустой, будут выдаваться все записи без ограничения.
       * </pre>
       *
       * <code>repeated .IRIS.SecurityRecordStatus status = 3;</code>
       */
      public Builder addAllStatusValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureStatusIsMutable();
        for (int value : values) {
          status_.add(value);
        }
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> secType_ =
        java.util.Collections.emptyList();
      private void ensureSecTypeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          secType_ = new java.util.ArrayList<java.lang.Integer>(secType_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiSecs.SecType> getSecTypeList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, kz.kase.iris.model.IrisApiSecs.SecType>(secType_, secType_converter_);
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public int getSecTypeCount() {
        return secType_.size();
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.SecType getSecType(int index) {
        return secType_converter_.convert(secType_.get(index));
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder setSecType(
          int index, kz.kase.iris.model.IrisApiSecs.SecType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSecTypeIsMutable();
        secType_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder addSecType(kz.kase.iris.model.IrisApiSecs.SecType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSecTypeIsMutable();
        secType_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder addAllSecType(
          java.lang.Iterable<? extends kz.kase.iris.model.IrisApiSecs.SecType> values) {
        ensureSecTypeIsMutable();
        for (kz.kase.iris.model.IrisApiSecs.SecType value : values) {
          secType_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder clearSecType() {
        secType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public java.util.List<java.lang.Integer>
      getSecTypeValueList() {
        return java.util.Collections.unmodifiableList(secType_);
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public int getSecTypeValue(int index) {
        return secType_.get(index);
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder setSecTypeValue(
          int index, int value) {
        ensureSecTypeIsMutable();
        secType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder addSecTypeValue(int value) {
        ensureSecTypeIsMutable();
        secType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Список требуемых типов ценных бумаг.
       * </pre>
       *
       * <code>repeated .IRIS.SecType sec_type = 4;</code>
       */
      public Builder addAllSecTypeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureSecTypeIsMutable();
        for (int value : values) {
          secType_.add(value);
        }
        onChanged();
        return this;
      }

      private boolean government_ ;
      /**
       * <pre>
       * Запрос на выдачу только государственных ценных бумаг.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public boolean getGovernment() {
        return government_;
      }
      /**
       * <pre>
       * Запрос на выдачу только государственных ценных бумаг.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public Builder setGovernment(boolean value) {
        
        government_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Запрос на выдачу только государственных ценных бумаг.
       * </pre>
       *
       * <code>bool government = 5;</code>
       */
      public Builder clearGovernment() {
        
        government_ = false;
        onChanged();
        return this;
      }

      private int tradeArea_ = 0;
      /**
       * <pre>
       * Требуемая торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public int getTradeAreaValue() {
        return tradeArea_;
      }
      /**
       * <pre>
       * Требуемая торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder setTradeAreaValue(int value) {
        tradeArea_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Требуемая торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.TradeArea getTradeArea() {
        @SuppressWarnings("deprecation")
        kz.kase.iris.model.IrisApiSecs.TradeArea result = kz.kase.iris.model.IrisApiSecs.TradeArea.valueOf(tradeArea_);
        return result == null ? kz.kase.iris.model.IrisApiSecs.TradeArea.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Требуемая торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder setTradeArea(kz.kase.iris.model.IrisApiSecs.TradeArea value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        tradeArea_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Требуемая торговая площадка.
       * </pre>
       *
       * <code>.IRIS.TradeArea trade_area = 6;</code>
       */
      public Builder clearTradeArea() {
        
        tradeArea_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.InstrumentsFilter)
    }

    // @@protoc_insertion_point(class_scope:IRIS.InstrumentsFilter)
    private static final kz.kase.iris.model.IrisApiSecs.InstrumentsFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiSecs.InstrumentsFilter();
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstrumentsFilter>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentsFilter>() {
      @java.lang.Override
      public InstrumentsFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstrumentsFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstrumentsFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentsFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.InstrumentsRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    boolean hasFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder getFilterOrBuilder();

    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    boolean hasRange();
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.Range getRange();
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder();

    /**
     * <pre>
     * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
     * Взаимоисключаемо с range.
     * </pre>
     *
     * <code>int32 bandle = 3;</code>
     */
    int getBandle();

    /**
     * <pre>
     * В случае если это поле заполнено как &lt;tag&gt;true&lt;/tag&gt; в пришедших в ответ сообщениях &lt;link linkend=".IRIS.InstrumentsFilter"&gt;InstrumentsFilter&lt;/link&gt; будет заполнено поле issuer_info.
     * </pre>
     *
     * <code>bool include_issuer_info = 4;</code>
     */
    boolean getIncludeIssuerInfo();

    public kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.RecordsCase getRecordsCase();
  }
  /**
   * <pre>
   * Запрос на получение списка инструментов. 
   * </pre>
   *
   * Protobuf type {@code IRIS.InstrumentsRequest}
   */
  public  static final class InstrumentsRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.InstrumentsRequest)
      InstrumentsRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentsRequest.newBuilder() to construct.
    private InstrumentsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentsRequest() {
      includeIssuerInfo_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstrumentsRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              kz.kase.iris.model.IrisApiBase.Range.Builder subBuilder = null;
              if (recordsCase_ == 2) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Range) records_).toBuilder();
              }
              records_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Range.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Range) records_);
                records_ = subBuilder.buildPartial();
              }
              recordsCase_ = 2;
              break;
            }
            case 24: {
              recordsCase_ = 3;
              records_ = input.readInt32();
              break;
            }
            case 32: {

              includeIssuerInfo_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.class, kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.Builder.class);
    }

    private int recordsCase_ = 0;
    private java.lang.Object records_;
    public enum RecordsCase
        implements com.google.protobuf.Internal.EnumLite {
      RANGE(2),
      BANDLE(3),
      RECORDS_NOT_SET(0);
      private final int value;
      private RecordsCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RecordsCase valueOf(int value) {
        return forNumber(value);
      }

      public static RecordsCase forNumber(int value) {
        switch (value) {
          case 2: return RANGE;
          case 3: return BANDLE;
          case 0: return RECORDS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RecordsCase
    getRecordsCase() {
      return RecordsCase.forNumber(
          recordsCase_);
    }

    public static final int FILTER_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiSecs.InstrumentsFilter filter_;
    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getFilter() {
      return filter_ == null ? kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка инструментов.
     * </pre>
     *
     * <code>.IRIS.InstrumentsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int RANGE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public boolean hasRange() {
      return recordsCase_ == 2;
    }
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Range getRange() {
      if (recordsCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Range) records_;
      }
      return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
    }
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
      if (recordsCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Range) records_;
      }
      return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
    }

    public static final int BANDLE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
     * Взаимоисключаемо с range.
     * </pre>
     *
     * <code>int32 bandle = 3;</code>
     */
    public int getBandle() {
      if (recordsCase_ == 3) {
        return (java.lang.Integer) records_;
      }
      return 0;
    }

    public static final int INCLUDE_ISSUER_INFO_FIELD_NUMBER = 4;
    private boolean includeIssuerInfo_;
    /**
     * <pre>
     * В случае если это поле заполнено как &lt;tag&gt;true&lt;/tag&gt; в пришедших в ответ сообщениях &lt;link linkend=".IRIS.InstrumentsFilter"&gt;InstrumentsFilter&lt;/link&gt; будет заполнено поле issuer_info.
     * </pre>
     *
     * <code>bool include_issuer_info = 4;</code>
     */
    public boolean getIncludeIssuerInfo() {
      return includeIssuerInfo_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (filter_ != null) {
        output.writeMessage(1, getFilter());
      }
      if (recordsCase_ == 2) {
        output.writeMessage(2, (kz.kase.iris.model.IrisApiBase.Range) records_);
      }
      if (recordsCase_ == 3) {
        output.writeInt32(
            3, (int)((java.lang.Integer) records_));
      }
      if (includeIssuerInfo_ != false) {
        output.writeBool(4, includeIssuerInfo_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFilter());
      }
      if (recordsCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (kz.kase.iris.model.IrisApiBase.Range) records_);
      }
      if (recordsCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              3, (int)((java.lang.Integer) records_));
      }
      if (includeIssuerInfo_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, includeIssuerInfo_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsRequest)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiSecs.InstrumentsRequest other = (kz.kase.iris.model.IrisApiSecs.InstrumentsRequest) obj;

      boolean result = true;
      result = result && (hasFilter() == other.hasFilter());
      if (hasFilter()) {
        result = result && getFilter()
            .equals(other.getFilter());
      }
      result = result && (getIncludeIssuerInfo()
          == other.getIncludeIssuerInfo());
      result = result && getRecordsCase().equals(
          other.getRecordsCase());
      if (!result) return false;
      switch (recordsCase_) {
        case 2:
          result = result && getRange()
              .equals(other.getRange());
          break;
        case 3:
          result = result && (getBandle()
              == other.getBandle());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (37 * hash) + INCLUDE_ISSUER_INFO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludeIssuerInfo());
      switch (recordsCase_) {
        case 2:
          hash = (37 * hash) + RANGE_FIELD_NUMBER;
          hash = (53 * hash) + getRange().hashCode();
          break;
        case 3:
          hash = (37 * hash) + BANDLE_FIELD_NUMBER;
          hash = (53 * hash) + getBandle();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiSecs.InstrumentsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Запрос на получение списка инструментов. 
     * </pre>
     *
     * Protobuf type {@code IRIS.InstrumentsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.InstrumentsRequest)
        kz.kase.iris.model.IrisApiSecs.InstrumentsRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.class, kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        includeIssuerInfo_ = false;

        recordsCase_ = 0;
        records_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsRequest_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsRequest getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsRequest build() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsRequest buildPartial() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsRequest result = new kz.kase.iris.model.IrisApiSecs.InstrumentsRequest(this);
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        if (recordsCase_ == 2) {
          if (rangeBuilder_ == null) {
            result.records_ = records_;
          } else {
            result.records_ = rangeBuilder_.build();
          }
        }
        if (recordsCase_ == 3) {
          result.records_ = records_;
        }
        result.includeIssuerInfo_ = includeIssuerInfo_;
        result.recordsCase_ = recordsCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsRequest) {
          return mergeFrom((kz.kase.iris.model.IrisApiSecs.InstrumentsRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiSecs.InstrumentsRequest other) {
        if (other == kz.kase.iris.model.IrisApiSecs.InstrumentsRequest.getDefaultInstance()) return this;
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        if (other.getIncludeIssuerInfo() != false) {
          setIncludeIssuerInfo(other.getIncludeIssuerInfo());
        }
        switch (other.getRecordsCase()) {
          case RANGE: {
            mergeRange(other.getRange());
            break;
          }
          case BANDLE: {
            setBandle(other.getBandle());
            break;
          }
          case RECORDS_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiSecs.InstrumentsRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiSecs.InstrumentsRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int recordsCase_ = 0;
      private java.lang.Object records_;
      public RecordsCase
          getRecordsCase() {
        return RecordsCase.forNumber(
            recordsCase_);
      }

      public Builder clearRecords() {
        recordsCase_ = 0;
        records_ = null;
        onChanged();
        return this;
      }


      private kz.kase.iris.model.IrisApiSecs.InstrumentsFilter filter_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiSecs.InstrumentsFilter, kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder> filterBuilder_;
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public Builder setFilter(kz.kase.iris.model.IrisApiSecs.InstrumentsFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public Builder setFilter(
          kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public Builder mergeFilter(kz.kase.iris.model.IrisApiSecs.InstrumentsFilter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка инструментов.
       * </pre>
       *
       * <code>.IRIS.InstrumentsFilter filter = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiSecs.InstrumentsFilter, kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiSecs.InstrumentsFilter, kz.kase.iris.model.IrisApiSecs.InstrumentsFilter.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentsFilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> rangeBuilder_;
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public boolean hasRange() {
        return recordsCase_ == 2;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range getRange() {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Range) records_;
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        } else {
          if (recordsCase_ == 2) {
            return rangeBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder setRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          records_ = value;
          onChanged();
        } else {
          rangeBuilder_.setMessage(value);
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder setRange(
          kz.kase.iris.model.IrisApiBase.Range.Builder builderForValue) {
        if (rangeBuilder_ == null) {
          records_ = builderForValue.build();
          onChanged();
        } else {
          rangeBuilder_.setMessage(builderForValue.build());
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder mergeRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2 &&
              records_ != kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance()) {
            records_ = kz.kase.iris.model.IrisApiBase.Range.newBuilder((kz.kase.iris.model.IrisApiBase.Range) records_)
                .mergeFrom(value).buildPartial();
          } else {
            records_ = value;
          }
          onChanged();
        } else {
          if (recordsCase_ == 2) {
            rangeBuilder_.mergeFrom(value);
          }
          rangeBuilder_.setMessage(value);
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder clearRange() {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2) {
            recordsCase_ = 0;
            records_ = null;
            onChanged();
          }
        } else {
          if (recordsCase_ == 2) {
            recordsCase_ = 0;
            records_ = null;
          }
          rangeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range.Builder getRangeBuilder() {
        return getRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
        if ((recordsCase_ == 2) && (rangeBuilder_ != null)) {
          return rangeBuilder_.getMessageOrBuilder();
        } else {
          if (recordsCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Range) records_;
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> 
          getRangeFieldBuilder() {
        if (rangeBuilder_ == null) {
          if (!(recordsCase_ == 2)) {
            records_ = kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
          }
          rangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Range) records_,
                  getParentForChildren(),
                  isClean());
          records_ = null;
        }
        recordsCase_ = 2;
        onChanged();;
        return rangeBuilder_;
      }

      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public int getBandle() {
        if (recordsCase_ == 3) {
          return (java.lang.Integer) records_;
        }
        return 0;
      }
      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public Builder setBandle(int value) {
        recordsCase_ = 3;
        records_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public Builder clearBandle() {
        if (recordsCase_ == 3) {
          recordsCase_ = 0;
          records_ = null;
          onChanged();
        }
        return this;
      }

      private boolean includeIssuerInfo_ ;
      /**
       * <pre>
       * В случае если это поле заполнено как &lt;tag&gt;true&lt;/tag&gt; в пришедших в ответ сообщениях &lt;link linkend=".IRIS.InstrumentsFilter"&gt;InstrumentsFilter&lt;/link&gt; будет заполнено поле issuer_info.
       * </pre>
       *
       * <code>bool include_issuer_info = 4;</code>
       */
      public boolean getIncludeIssuerInfo() {
        return includeIssuerInfo_;
      }
      /**
       * <pre>
       * В случае если это поле заполнено как &lt;tag&gt;true&lt;/tag&gt; в пришедших в ответ сообщениях &lt;link linkend=".IRIS.InstrumentsFilter"&gt;InstrumentsFilter&lt;/link&gt; будет заполнено поле issuer_info.
       * </pre>
       *
       * <code>bool include_issuer_info = 4;</code>
       */
      public Builder setIncludeIssuerInfo(boolean value) {
        
        includeIssuerInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * В случае если это поле заполнено как &lt;tag&gt;true&lt;/tag&gt; в пришедших в ответ сообщениях &lt;link linkend=".IRIS.InstrumentsFilter"&gt;InstrumentsFilter&lt;/link&gt; будет заполнено поле issuer_info.
       * </pre>
       *
       * <code>bool include_issuer_info = 4;</code>
       */
      public Builder clearIncludeIssuerInfo() {
        
        includeIssuerInfo_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.InstrumentsRequest)
    }

    // @@protoc_insertion_point(class_scope:IRIS.InstrumentsRequest)
    private static final kz.kase.iris.model.IrisApiSecs.InstrumentsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiSecs.InstrumentsRequest();
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstrumentsRequest>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentsRequest>() {
      @java.lang.Override
      public InstrumentsRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstrumentsRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstrumentsRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentsRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiSecs.InstrumentsRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstrumentsReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.InstrumentsReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    boolean hasRange();
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.Range getRange();
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder();

    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument> 
        getInstrumentsList();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    kz.kase.iris.model.IrisApiSecs.Instrument getInstruments(int index);
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    int getInstrumentsCount();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    java.util.List<? extends kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder> 
        getInstrumentsOrBuilderList();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder getInstrumentsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Ответ со списком запрошенных инструментов. 
   * </pre>
   *
   * Protobuf type {@code IRIS.InstrumentsReply}
   */
  public  static final class InstrumentsReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.InstrumentsReply)
      InstrumentsReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentsReply.newBuilder() to construct.
    private InstrumentsReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentsReply() {
      instruments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstrumentsReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiBase.Range.Builder subBuilder = null;
              if (range_ != null) {
                subBuilder = range_.toBuilder();
              }
              range_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Range.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(range_);
                range_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                instruments_ = new java.util.ArrayList<kz.kase.iris.model.IrisApiSecs.Instrument>();
                mutable_bitField0_ |= 0x00000002;
              }
              instruments_.add(
                  input.readMessage(kz.kase.iris.model.IrisApiSecs.Instrument.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          instruments_ = java.util.Collections.unmodifiableList(instruments_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiSecs.InstrumentsReply.class, kz.kase.iris.model.IrisApiSecs.InstrumentsReply.Builder.class);
    }

    private int bitField0_;
    public static final int RANGE_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiBase.Range range_;
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public boolean hasRange() {
      return range_ != null;
    }
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Range getRange() {
      return range_ == null ? kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
    }
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
      return getRange();
    }

    public static final int INSTRUMENTS_FIELD_NUMBER = 2;
    private java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument> instruments_;
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    public java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument> getInstrumentsList() {
      return instruments_;
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    public java.util.List<? extends kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder> 
        getInstrumentsOrBuilderList() {
      return instruments_;
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    public int getInstrumentsCount() {
      return instruments_.size();
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.Instrument getInstruments(int index) {
      return instruments_.get(index);
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Instrument instruments = 2;</code>
     */
    public kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder getInstrumentsOrBuilder(
        int index) {
      return instruments_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (range_ != null) {
        output.writeMessage(1, getRange());
      }
      for (int i = 0; i < instruments_.size(); i++) {
        output.writeMessage(2, instruments_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (range_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRange());
      }
      for (int i = 0; i < instruments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, instruments_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsReply)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiSecs.InstrumentsReply other = (kz.kase.iris.model.IrisApiSecs.InstrumentsReply) obj;

      boolean result = true;
      result = result && (hasRange() == other.hasRange());
      if (hasRange()) {
        result = result && getRange()
            .equals(other.getRange());
      }
      result = result && getInstrumentsList()
          .equals(other.getInstrumentsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRange()) {
        hash = (37 * hash) + RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getRange().hashCode();
      }
      if (getInstrumentsCount() > 0) {
        hash = (37 * hash) + INSTRUMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getInstrumentsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiSecs.InstrumentsReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Ответ со списком запрошенных инструментов. 
     * </pre>
     *
     * Protobuf type {@code IRIS.InstrumentsReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.InstrumentsReply)
        kz.kase.iris.model.IrisApiSecs.InstrumentsReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiSecs.InstrumentsReply.class, kz.kase.iris.model.IrisApiSecs.InstrumentsReply.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiSecs.InstrumentsReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInstrumentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (rangeBuilder_ == null) {
          range_ = null;
        } else {
          range_ = null;
          rangeBuilder_ = null;
        }
        if (instrumentsBuilder_ == null) {
          instruments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          instrumentsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiSecs.internal_static_IRIS_InstrumentsReply_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsReply getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiSecs.InstrumentsReply.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsReply build() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiSecs.InstrumentsReply buildPartial() {
        kz.kase.iris.model.IrisApiSecs.InstrumentsReply result = new kz.kase.iris.model.IrisApiSecs.InstrumentsReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (rangeBuilder_ == null) {
          result.range_ = range_;
        } else {
          result.range_ = rangeBuilder_.build();
        }
        if (instrumentsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            instruments_ = java.util.Collections.unmodifiableList(instruments_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.instruments_ = instruments_;
        } else {
          result.instruments_ = instrumentsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiSecs.InstrumentsReply) {
          return mergeFrom((kz.kase.iris.model.IrisApiSecs.InstrumentsReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiSecs.InstrumentsReply other) {
        if (other == kz.kase.iris.model.IrisApiSecs.InstrumentsReply.getDefaultInstance()) return this;
        if (other.hasRange()) {
          mergeRange(other.getRange());
        }
        if (instrumentsBuilder_ == null) {
          if (!other.instruments_.isEmpty()) {
            if (instruments_.isEmpty()) {
              instruments_ = other.instruments_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInstrumentsIsMutable();
              instruments_.addAll(other.instruments_);
            }
            onChanged();
          }
        } else {
          if (!other.instruments_.isEmpty()) {
            if (instrumentsBuilder_.isEmpty()) {
              instrumentsBuilder_.dispose();
              instrumentsBuilder_ = null;
              instruments_ = other.instruments_;
              bitField0_ = (bitField0_ & ~0x00000002);
              instrumentsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInstrumentsFieldBuilder() : null;
            } else {
              instrumentsBuilder_.addAllMessages(other.instruments_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiSecs.InstrumentsReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiSecs.InstrumentsReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private kz.kase.iris.model.IrisApiBase.Range range_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> rangeBuilder_;
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public boolean hasRange() {
        return rangeBuilder_ != null || range_ != null;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range getRange() {
        if (rangeBuilder_ == null) {
          return range_ == null ? kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
        } else {
          return rangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder setRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          range_ = value;
          onChanged();
        } else {
          rangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder setRange(
          kz.kase.iris.model.IrisApiBase.Range.Builder builderForValue) {
        if (rangeBuilder_ == null) {
          range_ = builderForValue.build();
          onChanged();
        } else {
          rangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder mergeRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (range_ != null) {
            range_ =
              kz.kase.iris.model.IrisApiBase.Range.newBuilder(range_).mergeFrom(value).buildPartial();
          } else {
            range_ = value;
          }
          onChanged();
        } else {
          rangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder clearRange() {
        if (rangeBuilder_ == null) {
          range_ = null;
          onChanged();
        } else {
          range_ = null;
          rangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range.Builder getRangeBuilder() {
        
        onChanged();
        return getRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
        if (rangeBuilder_ != null) {
          return rangeBuilder_.getMessageOrBuilder();
        } else {
          return range_ == null ?
              kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
        }
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> 
          getRangeFieldBuilder() {
        if (rangeBuilder_ == null) {
          rangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder>(
                  getRange(),
                  getParentForChildren(),
                  isClean());
          range_ = null;
        }
        return rangeBuilder_;
      }

      private java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument> instruments_ =
        java.util.Collections.emptyList();
      private void ensureInstrumentsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          instruments_ = new java.util.ArrayList<kz.kase.iris.model.IrisApiSecs.Instrument>(instruments_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          kz.kase.iris.model.IrisApiSecs.Instrument, kz.kase.iris.model.IrisApiSecs.Instrument.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder> instrumentsBuilder_;

      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument> getInstrumentsList() {
        if (instrumentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(instruments_);
        } else {
          return instrumentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public int getInstrumentsCount() {
        if (instrumentsBuilder_ == null) {
          return instruments_.size();
        } else {
          return instrumentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.Instrument getInstruments(int index) {
        if (instrumentsBuilder_ == null) {
          return instruments_.get(index);
        } else {
          return instrumentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder setInstruments(
          int index, kz.kase.iris.model.IrisApiSecs.Instrument value) {
        if (instrumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstrumentsIsMutable();
          instruments_.set(index, value);
          onChanged();
        } else {
          instrumentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder setInstruments(
          int index, kz.kase.iris.model.IrisApiSecs.Instrument.Builder builderForValue) {
        if (instrumentsBuilder_ == null) {
          ensureInstrumentsIsMutable();
          instruments_.set(index, builderForValue.build());
          onChanged();
        } else {
          instrumentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder addInstruments(kz.kase.iris.model.IrisApiSecs.Instrument value) {
        if (instrumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstrumentsIsMutable();
          instruments_.add(value);
          onChanged();
        } else {
          instrumentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder addInstruments(
          int index, kz.kase.iris.model.IrisApiSecs.Instrument value) {
        if (instrumentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstrumentsIsMutable();
          instruments_.add(index, value);
          onChanged();
        } else {
          instrumentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder addInstruments(
          kz.kase.iris.model.IrisApiSecs.Instrument.Builder builderForValue) {
        if (instrumentsBuilder_ == null) {
          ensureInstrumentsIsMutable();
          instruments_.add(builderForValue.build());
          onChanged();
        } else {
          instrumentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder addInstruments(
          int index, kz.kase.iris.model.IrisApiSecs.Instrument.Builder builderForValue) {
        if (instrumentsBuilder_ == null) {
          ensureInstrumentsIsMutable();
          instruments_.add(index, builderForValue.build());
          onChanged();
        } else {
          instrumentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder addAllInstruments(
          java.lang.Iterable<? extends kz.kase.iris.model.IrisApiSecs.Instrument> values) {
        if (instrumentsBuilder_ == null) {
          ensureInstrumentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, instruments_);
          onChanged();
        } else {
          instrumentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder clearInstruments() {
        if (instrumentsBuilder_ == null) {
          instruments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          instrumentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public Builder removeInstruments(int index) {
        if (instrumentsBuilder_ == null) {
          ensureInstrumentsIsMutable();
          instruments_.remove(index);
          onChanged();
        } else {
          instrumentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.Instrument.Builder getInstrumentsBuilder(
          int index) {
        return getInstrumentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder getInstrumentsOrBuilder(
          int index) {
        if (instrumentsBuilder_ == null) {
          return instruments_.get(index);  } else {
          return instrumentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public java.util.List<? extends kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder> 
           getInstrumentsOrBuilderList() {
        if (instrumentsBuilder_ != null) {
          return instrumentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(instruments_);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.Instrument.Builder addInstrumentsBuilder() {
        return getInstrumentsFieldBuilder().addBuilder(
            kz.kase.iris.model.IrisApiSecs.Instrument.getDefaultInstance());
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public kz.kase.iris.model.IrisApiSecs.Instrument.Builder addInstrumentsBuilder(
          int index) {
        return getInstrumentsFieldBuilder().addBuilder(
            index, kz.kase.iris.model.IrisApiSecs.Instrument.getDefaultInstance());
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Instrument instruments = 2;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiSecs.Instrument.Builder> 
           getInstrumentsBuilderList() {
        return getInstrumentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          kz.kase.iris.model.IrisApiSecs.Instrument, kz.kase.iris.model.IrisApiSecs.Instrument.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder> 
          getInstrumentsFieldBuilder() {
        if (instrumentsBuilder_ == null) {
          instrumentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              kz.kase.iris.model.IrisApiSecs.Instrument, kz.kase.iris.model.IrisApiSecs.Instrument.Builder, kz.kase.iris.model.IrisApiSecs.InstrumentOrBuilder>(
                  instruments_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          instruments_ = null;
        }
        return instrumentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.InstrumentsReply)
    }

    // @@protoc_insertion_point(class_scope:IRIS.InstrumentsReply)
    private static final kz.kase.iris.model.IrisApiSecs.InstrumentsReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiSecs.InstrumentsReply();
    }

    public static kz.kase.iris.model.IrisApiSecs.InstrumentsReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstrumentsReply>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentsReply>() {
      @java.lang.Override
      public InstrumentsReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstrumentsReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstrumentsReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentsReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiSecs.InstrumentsReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_Security_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_Security_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_Instrument_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_Instrument_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_InstrumentsFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_InstrumentsFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_InstrumentsRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_InstrumentsRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_InstrumentsReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_InstrumentsReply_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023iris_api_secs.proto\022\004IRIS\032\023iris_api_ba" +
      "se.proto\032\026iris_api_issuers.proto\"\260\001\n\010Sec" +
      "urity\022\023\n\013security_id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t" +
      "\022*\n\006status\030\003 \001(\0162\032.IRIS.SecurityRecordSt" +
      "atus\022\033\n\004type\030\004 \001(\0162\r.IRIS.SecType\022\022\n\ngov" +
      "ernment\030\005 \001(\010\022\023\n\013instruments\030\006 \003(\005\022\017\n\007ve" +
      "rsion\030\007 \001(\003\"\374\001\n\nInstrument\022\025\n\rinstrument" +
      "_id\030\001 \001(\005\022\023\n\013security_id\030\002 \001(\005\022\014\n\004code\030\003" +
      " \001(\t\022*\n\006status\030\004 \001(\0162\032.IRIS.SecurityReco" +
      "rdStatus\022\033\n\004type\030\005 \001(\0162\r.IRIS.SecType\022#\n" +
      "\ntrade_area\030\006 \001(\0162\017.IRIS.TradeArea\022\022\n\ngo" +
      "vernment\030\007 \001(\010\022!\n\013issuer_info\030\010 \001(\0132\014.IR" +
      "IS.Issuer\022\017\n\007version\030\t \001(\003\"\265\001\n\021Instrumen" +
      "tsFilter\022\r\n\005codes\030\001 \003(\t\022\013\n\003ids\030\002 \003(\005\022*\n\006" +
      "status\030\003 \003(\0162\032.IRIS.SecurityRecordStatus" +
      "\022\037\n\010sec_type\030\004 \003(\0162\r.IRIS.SecType\022\022\n\ngov" +
      "ernment\030\005 \001(\010\022#\n\ntrade_area\030\006 \001(\0162\017.IRIS" +
      ".TradeArea\"\225\001\n\022InstrumentsRequest\022\'\n\006fil" +
      "ter\030\001 \001(\0132\027.IRIS.InstrumentsFilter\022\034\n\005ra" +
      "nge\030\002 \001(\0132\013.IRIS.RangeH\000\022\020\n\006bandle\030\003 \001(\005" +
      "H\000\022\033\n\023include_issuer_info\030\004 \001(\010B\t\n\007recor" +
      "ds\"U\n\020InstrumentsReply\022\032\n\005range\030\001 \001(\0132\013." +
      "IRIS.Range\022%\n\013instruments\030\002 \003(\0132\020.IRIS.I" +
      "nstrument*R\n\007SecType\022\n\n\006SHARES\020\000\022\t\n\005BOND" +
      "S\020\001\022\007\n\003SBS\020\002\022\010\n\004UNIT\020\003\022\013\n\007FUTURES\020\004\022\007\n\003E" +
      "TF\020\005\022\007\n\003GDR\020\007*\037\n\tTradeArea\022\010\n\004KASE\020\000\022\010\n\004" +
      "RFCA\020\001*H\n\024SecurityRecordStatus\022\016\n\nSRS_AC" +
      "TIVE\020\000\022\017\n\013SRS_HISTORY\020\001\022\017\n\013SRS_DELETED\020\002" +
      "B\033\n\022kz.kase.iris.model\242\002\004IRISb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          kz.kase.iris.model.IrisApiBase.getDescriptor(),
          kz.kase.iris.model.IrisApiIssuers.getDescriptor(),
        }, assigner);
    internal_static_IRIS_Security_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_IRIS_Security_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_Security_descriptor,
        new java.lang.String[] { "SecurityId", "Code", "Status", "Type", "Government", "Instruments", "Version", });
    internal_static_IRIS_Instrument_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_IRIS_Instrument_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_Instrument_descriptor,
        new java.lang.String[] { "InstrumentId", "SecurityId", "Code", "Status", "Type", "TradeArea", "Government", "IssuerInfo", "Version", });
    internal_static_IRIS_InstrumentsFilter_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_IRIS_InstrumentsFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_InstrumentsFilter_descriptor,
        new java.lang.String[] { "Codes", "Ids", "Status", "SecType", "Government", "TradeArea", });
    internal_static_IRIS_InstrumentsRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_IRIS_InstrumentsRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_InstrumentsRequest_descriptor,
        new java.lang.String[] { "Filter", "Range", "Bandle", "IncludeIssuerInfo", "Records", });
    internal_static_IRIS_InstrumentsReply_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_IRIS_InstrumentsReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_InstrumentsReply_descriptor,
        new java.lang.String[] { "Range", "Instruments", });
    kz.kase.iris.model.IrisApiBase.getDescriptor();
    kz.kase.iris.model.IrisApiIssuers.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
