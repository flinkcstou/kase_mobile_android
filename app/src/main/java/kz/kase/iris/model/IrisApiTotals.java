// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iris_api_totals.proto

package kz.kase.iris.model;

public final class IrisApiTotals {
  private IrisApiTotals() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TotalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.Total)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 instrument_id = 1;</code>
     */
    int getInstrumentId();

    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string instrument_code = 2;</code>
     */
    java.lang.String getInstrumentCode();
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string instrument_code = 2;</code>
     */
    com.google.protobuf.ByteString
        getInstrumentCodeBytes();

    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    boolean hasPrice();
    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    kz.kase.iris.model.IrisApiBase.Ohlc getPrice();
    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getPriceOrBuilder();

    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    boolean hasVolume();
    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    kz.kase.iris.model.IrisApiBase.Ohlc getVolume();
    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getVolumeOrBuilder();

    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    boolean hasKztSum();
    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getKztSum();
    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumOrBuilder();

    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    boolean hasKztSumTrend();
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrend();
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendOrBuilder();

    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    boolean hasKztSumTrendPs();
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrendPs();
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendPsOrBuilder();

    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    boolean hasUsdSum();
    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getUsdSum();
    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getUsdSumOrBuilder();

    /**
     * <pre>
     * Количество сделок за период.
     * </pre>
     *
     * <code>int32 deal_count = 9;</code>
     */
    int getDealCount();

    /**
     * <pre>
     * Количество заявок за период.
     * </pre>
     *
     * <code>int32 order_count = 10;</code>
     */
    int getOrderCount();

    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    boolean hasBidPrice();
    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getBidPrice();
    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getBidPriceOrBuilder();

    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    boolean hasAskPrice();
    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    kz.kase.iris.model.IrisApiBase.Decimal getAskPrice();
    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getAskPriceOrBuilder();

    /**
     * <pre>
     * Объем в единицах инструменда для лучшего предложения.
     * </pre>
     *
     * <code>int32 bid_qty = 13;</code>
     */
    int getBidQty();

    /**
     * <pre>
     * Объем в единицах инструменда для спроса.
     * </pre>
     *
     * <code>int32 ask_qty = 14;</code>
     */
    int getAskQty();

    /**
     * <pre>
     * Внутренний код состояния торговой сессии в торговой системе.
     * </pre>
     *
     * <code>string session_internal_code = 16;</code>
     */
    java.lang.String getSessionInternalCode();
    /**
     * <pre>
     * Внутренний код состояния торговой сессии в торговой системе.
     * </pre>
     *
     * <code>string session_internal_code = 16;</code>
     */
    com.google.protobuf.ByteString
        getSessionInternalCodeBytes();
  }
  /**
   * <pre>
   * Информации о торгах, сгруппированная за период для одного инструмента. 
   * </pre>
   *
   * Protobuf type {@code IRIS.Total}
   */
  public  static final class Total extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.Total)
      TotalOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Total.newBuilder() to construct.
    private Total(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Total() {
      instrumentId_ = 0;
      instrumentCode_ = "";
      dealCount_ = 0;
      orderCount_ = 0;
      bidQty_ = 0;
      askQty_ = 0;
      sessionInternalCode_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Total(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              instrumentId_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              instrumentCode_ = s;
              break;
            }
            case 26: {
              kz.kase.iris.model.IrisApiBase.Ohlc.Builder subBuilder = null;
              if (price_ != null) {
                subBuilder = price_.toBuilder();
              }
              price_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Ohlc.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(price_);
                price_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              kz.kase.iris.model.IrisApiBase.Ohlc.Builder subBuilder = null;
              if (volume_ != null) {
                subBuilder = volume_.toBuilder();
              }
              volume_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Ohlc.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(volume_);
                volume_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (kztSum_ != null) {
                subBuilder = kztSum_.toBuilder();
              }
              kztSum_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kztSum_);
                kztSum_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (kztSumTrend_ != null) {
                subBuilder = kztSumTrend_.toBuilder();
              }
              kztSumTrend_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kztSumTrend_);
                kztSumTrend_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (kztSumTrendPs_ != null) {
                subBuilder = kztSumTrendPs_.toBuilder();
              }
              kztSumTrendPs_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(kztSumTrendPs_);
                kztSumTrendPs_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (usdSum_ != null) {
                subBuilder = usdSum_.toBuilder();
              }
              usdSum_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(usdSum_);
                usdSum_ = subBuilder.buildPartial();
              }

              break;
            }
            case 72: {

              dealCount_ = input.readInt32();
              break;
            }
            case 80: {

              orderCount_ = input.readInt32();
              break;
            }
            case 90: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (bidPrice_ != null) {
                subBuilder = bidPrice_.toBuilder();
              }
              bidPrice_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bidPrice_);
                bidPrice_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              kz.kase.iris.model.IrisApiBase.Decimal.Builder subBuilder = null;
              if (askPrice_ != null) {
                subBuilder = askPrice_.toBuilder();
              }
              askPrice_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Decimal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(askPrice_);
                askPrice_ = subBuilder.buildPartial();
              }

              break;
            }
            case 104: {

              bidQty_ = input.readInt32();
              break;
            }
            case 112: {

              askQty_ = input.readInt32();
              break;
            }
            case 130: {
              java.lang.String s = input.readStringRequireUtf8();

              sessionInternalCode_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_Total_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_Total_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.Total.class, kz.kase.iris.model.IrisApiTotals.Total.Builder.class);
    }

    public static final int INSTRUMENT_ID_FIELD_NUMBER = 1;
    private int instrumentId_;
    /**
     * <pre>
     * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
     * </pre>
     *
     * <code>int32 instrument_id = 1;</code>
     */
    public int getInstrumentId() {
      return instrumentId_;
    }

    public static final int INSTRUMENT_CODE_FIELD_NUMBER = 2;
    private volatile java.lang.Object instrumentCode_;
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string instrument_code = 2;</code>
     */
    public java.lang.String getInstrumentCode() {
      java.lang.Object ref = instrumentCode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instrumentCode_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Код инструмента.
     * </pre>
     *
     * <code>string instrument_code = 2;</code>
     */
    public com.google.protobuf.ByteString
        getInstrumentCodeBytes() {
      java.lang.Object ref = instrumentCode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instrumentCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PRICE_FIELD_NUMBER = 3;
    private kz.kase.iris.model.IrisApiBase.Ohlc price_;
    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    public boolean hasPrice() {
      return price_ != null;
    }
    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Ohlc getPrice() {
      return price_ == null ? kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : price_;
    }
    /**
     * <pre>
     * OHLC-информация по цене.
     * </pre>
     *
     * <code>.IRIS.Ohlc price = 3;</code>
     */
    public kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getPriceOrBuilder() {
      return getPrice();
    }

    public static final int VOLUME_FIELD_NUMBER = 4;
    private kz.kase.iris.model.IrisApiBase.Ohlc volume_;
    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    public boolean hasVolume() {
      return volume_ != null;
    }
    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Ohlc getVolume() {
      return volume_ == null ? kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : volume_;
    }
    /**
     * <pre>
     * OHLC-информация по объему сделок в KZT.
     * </pre>
     *
     * <code>.IRIS.Ohlc volume = 4;</code>
     */
    public kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getVolumeOrBuilder() {
      return getVolume();
    }

    public static final int KZT_SUM_FIELD_NUMBER = 5;
    private kz.kase.iris.model.IrisApiBase.Decimal kztSum_;
    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    public boolean hasKztSum() {
      return kztSum_ != null;
    }
    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getKztSum() {
      return kztSum_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSum_;
    }
    /**
     * <pre>
     * Суммарный объем торгов за период в KZT.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum = 5;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumOrBuilder() {
      return getKztSum();
    }

    public static final int KZT_SUM_TREND_FIELD_NUMBER = 6;
    private kz.kase.iris.model.IrisApiBase.Decimal kztSumTrend_;
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    public boolean hasKztSumTrend() {
      return kztSumTrend_ != null;
    }
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrend() {
      return kztSumTrend_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrend_;
    }
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendOrBuilder() {
      return getKztSumTrend();
    }

    public static final int KZT_SUM_TREND_PS_FIELD_NUMBER = 7;
    private kz.kase.iris.model.IrisApiBase.Decimal kztSumTrendPs_;
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    public boolean hasKztSumTrendPs() {
      return kztSumTrendPs_ != null;
    }
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrendPs() {
      return kztSumTrendPs_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrendPs_;
    }
    /**
     * <pre>
     * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
     * </pre>
     *
     * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendPsOrBuilder() {
      return getKztSumTrendPs();
    }

    public static final int USD_SUM_FIELD_NUMBER = 8;
    private kz.kase.iris.model.IrisApiBase.Decimal usdSum_;
    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    public boolean hasUsdSum() {
      return usdSum_ != null;
    }
    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getUsdSum() {
      return usdSum_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : usdSum_;
    }
    /**
     * <pre>
     * Суммарный объем торгов за период в USD.
     * </pre>
     *
     * <code>.IRIS.Decimal usd_sum = 8;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getUsdSumOrBuilder() {
      return getUsdSum();
    }

    public static final int DEAL_COUNT_FIELD_NUMBER = 9;
    private int dealCount_;
    /**
     * <pre>
     * Количество сделок за период.
     * </pre>
     *
     * <code>int32 deal_count = 9;</code>
     */
    public int getDealCount() {
      return dealCount_;
    }

    public static final int ORDER_COUNT_FIELD_NUMBER = 10;
    private int orderCount_;
    /**
     * <pre>
     * Количество заявок за период.
     * </pre>
     *
     * <code>int32 order_count = 10;</code>
     */
    public int getOrderCount() {
      return orderCount_;
    }

    public static final int BID_PRICE_FIELD_NUMBER = 11;
    private kz.kase.iris.model.IrisApiBase.Decimal bidPrice_;
    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    public boolean hasBidPrice() {
      return bidPrice_ != null;
    }
    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getBidPrice() {
      return bidPrice_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : bidPrice_;
    }
    /**
     * <pre>
     * Цена лучшего предложения.
     * </pre>
     *
     * <code>.IRIS.Decimal bid_price = 11;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getBidPriceOrBuilder() {
      return getBidPrice();
    }

    public static final int ASK_PRICE_FIELD_NUMBER = 12;
    private kz.kase.iris.model.IrisApiBase.Decimal askPrice_;
    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    public boolean hasAskPrice() {
      return askPrice_ != null;
    }
    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Decimal getAskPrice() {
      return askPrice_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : askPrice_;
    }
    /**
     * <pre>
     * Цена лучшего спроса.
     * </pre>
     *
     * <code>.IRIS.Decimal ask_price = 12;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getAskPriceOrBuilder() {
      return getAskPrice();
    }

    public static final int BID_QTY_FIELD_NUMBER = 13;
    private int bidQty_;
    /**
     * <pre>
     * Объем в единицах инструменда для лучшего предложения.
     * </pre>
     *
     * <code>int32 bid_qty = 13;</code>
     */
    public int getBidQty() {
      return bidQty_;
    }

    public static final int ASK_QTY_FIELD_NUMBER = 14;
    private int askQty_;
    /**
     * <pre>
     * Объем в единицах инструменда для спроса.
     * </pre>
     *
     * <code>int32 ask_qty = 14;</code>
     */
    public int getAskQty() {
      return askQty_;
    }

    public static final int SESSION_INTERNAL_CODE_FIELD_NUMBER = 16;
    private volatile java.lang.Object sessionInternalCode_;
    /**
     * <pre>
     * Внутренний код состояния торговой сессии в торговой системе.
     * </pre>
     *
     * <code>string session_internal_code = 16;</code>
     */
    public java.lang.String getSessionInternalCode() {
      java.lang.Object ref = sessionInternalCode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sessionInternalCode_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Внутренний код состояния торговой сессии в торговой системе.
     * </pre>
     *
     * <code>string session_internal_code = 16;</code>
     */
    public com.google.protobuf.ByteString
        getSessionInternalCodeBytes() {
      java.lang.Object ref = sessionInternalCode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sessionInternalCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (instrumentId_ != 0) {
        output.writeInt32(1, instrumentId_);
      }
      if (!getInstrumentCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, instrumentCode_);
      }
      if (price_ != null) {
        output.writeMessage(3, getPrice());
      }
      if (volume_ != null) {
        output.writeMessage(4, getVolume());
      }
      if (kztSum_ != null) {
        output.writeMessage(5, getKztSum());
      }
      if (kztSumTrend_ != null) {
        output.writeMessage(6, getKztSumTrend());
      }
      if (kztSumTrendPs_ != null) {
        output.writeMessage(7, getKztSumTrendPs());
      }
      if (usdSum_ != null) {
        output.writeMessage(8, getUsdSum());
      }
      if (dealCount_ != 0) {
        output.writeInt32(9, dealCount_);
      }
      if (orderCount_ != 0) {
        output.writeInt32(10, orderCount_);
      }
      if (bidPrice_ != null) {
        output.writeMessage(11, getBidPrice());
      }
      if (askPrice_ != null) {
        output.writeMessage(12, getAskPrice());
      }
      if (bidQty_ != 0) {
        output.writeInt32(13, bidQty_);
      }
      if (askQty_ != 0) {
        output.writeInt32(14, askQty_);
      }
      if (!getSessionInternalCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 16, sessionInternalCode_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (instrumentId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, instrumentId_);
      }
      if (!getInstrumentCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, instrumentCode_);
      }
      if (price_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPrice());
      }
      if (volume_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getVolume());
      }
      if (kztSum_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKztSum());
      }
      if (kztSumTrend_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getKztSumTrend());
      }
      if (kztSumTrendPs_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getKztSumTrendPs());
      }
      if (usdSum_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getUsdSum());
      }
      if (dealCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, dealCount_);
      }
      if (orderCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, orderCount_);
      }
      if (bidPrice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getBidPrice());
      }
      if (askPrice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getAskPrice());
      }
      if (bidQty_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, bidQty_);
      }
      if (askQty_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, askQty_);
      }
      if (!getSessionInternalCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16, sessionInternalCode_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.Total)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.Total other = (kz.kase.iris.model.IrisApiTotals.Total) obj;

      boolean result = true;
      result = result && (getInstrumentId()
          == other.getInstrumentId());
      result = result && getInstrumentCode()
          .equals(other.getInstrumentCode());
      result = result && (hasPrice() == other.hasPrice());
      if (hasPrice()) {
        result = result && getPrice()
            .equals(other.getPrice());
      }
      result = result && (hasVolume() == other.hasVolume());
      if (hasVolume()) {
        result = result && getVolume()
            .equals(other.getVolume());
      }
      result = result && (hasKztSum() == other.hasKztSum());
      if (hasKztSum()) {
        result = result && getKztSum()
            .equals(other.getKztSum());
      }
      result = result && (hasKztSumTrend() == other.hasKztSumTrend());
      if (hasKztSumTrend()) {
        result = result && getKztSumTrend()
            .equals(other.getKztSumTrend());
      }
      result = result && (hasKztSumTrendPs() == other.hasKztSumTrendPs());
      if (hasKztSumTrendPs()) {
        result = result && getKztSumTrendPs()
            .equals(other.getKztSumTrendPs());
      }
      result = result && (hasUsdSum() == other.hasUsdSum());
      if (hasUsdSum()) {
        result = result && getUsdSum()
            .equals(other.getUsdSum());
      }
      result = result && (getDealCount()
          == other.getDealCount());
      result = result && (getOrderCount()
          == other.getOrderCount());
      result = result && (hasBidPrice() == other.hasBidPrice());
      if (hasBidPrice()) {
        result = result && getBidPrice()
            .equals(other.getBidPrice());
      }
      result = result && (hasAskPrice() == other.hasAskPrice());
      if (hasAskPrice()) {
        result = result && getAskPrice()
            .equals(other.getAskPrice());
      }
      result = result && (getBidQty()
          == other.getBidQty());
      result = result && (getAskQty()
          == other.getAskQty());
      result = result && getSessionInternalCode()
          .equals(other.getSessionInternalCode());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUMENT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getInstrumentId();
      hash = (37 * hash) + INSTRUMENT_CODE_FIELD_NUMBER;
      hash = (53 * hash) + getInstrumentCode().hashCode();
      if (hasPrice()) {
        hash = (37 * hash) + PRICE_FIELD_NUMBER;
        hash = (53 * hash) + getPrice().hashCode();
      }
      if (hasVolume()) {
        hash = (37 * hash) + VOLUME_FIELD_NUMBER;
        hash = (53 * hash) + getVolume().hashCode();
      }
      if (hasKztSum()) {
        hash = (37 * hash) + KZT_SUM_FIELD_NUMBER;
        hash = (53 * hash) + getKztSum().hashCode();
      }
      if (hasKztSumTrend()) {
        hash = (37 * hash) + KZT_SUM_TREND_FIELD_NUMBER;
        hash = (53 * hash) + getKztSumTrend().hashCode();
      }
      if (hasKztSumTrendPs()) {
        hash = (37 * hash) + KZT_SUM_TREND_PS_FIELD_NUMBER;
        hash = (53 * hash) + getKztSumTrendPs().hashCode();
      }
      if (hasUsdSum()) {
        hash = (37 * hash) + USD_SUM_FIELD_NUMBER;
        hash = (53 * hash) + getUsdSum().hashCode();
      }
      hash = (37 * hash) + DEAL_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDealCount();
      hash = (37 * hash) + ORDER_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getOrderCount();
      if (hasBidPrice()) {
        hash = (37 * hash) + BID_PRICE_FIELD_NUMBER;
        hash = (53 * hash) + getBidPrice().hashCode();
      }
      if (hasAskPrice()) {
        hash = (37 * hash) + ASK_PRICE_FIELD_NUMBER;
        hash = (53 * hash) + getAskPrice().hashCode();
      }
      hash = (37 * hash) + BID_QTY_FIELD_NUMBER;
      hash = (53 * hash) + getBidQty();
      hash = (37 * hash) + ASK_QTY_FIELD_NUMBER;
      hash = (53 * hash) + getAskQty();
      hash = (37 * hash) + SESSION_INTERNAL_CODE_FIELD_NUMBER;
      hash = (53 * hash) + getSessionInternalCode().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.Total parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.Total prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Информации о торгах, сгруппированная за период для одного инструмента. 
     * </pre>
     *
     * Protobuf type {@code IRIS.Total}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.Total)
        kz.kase.iris.model.IrisApiTotals.TotalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_Total_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_Total_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.Total.class, kz.kase.iris.model.IrisApiTotals.Total.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.Total.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instrumentId_ = 0;

        instrumentCode_ = "";

        if (priceBuilder_ == null) {
          price_ = null;
        } else {
          price_ = null;
          priceBuilder_ = null;
        }
        if (volumeBuilder_ == null) {
          volume_ = null;
        } else {
          volume_ = null;
          volumeBuilder_ = null;
        }
        if (kztSumBuilder_ == null) {
          kztSum_ = null;
        } else {
          kztSum_ = null;
          kztSumBuilder_ = null;
        }
        if (kztSumTrendBuilder_ == null) {
          kztSumTrend_ = null;
        } else {
          kztSumTrend_ = null;
          kztSumTrendBuilder_ = null;
        }
        if (kztSumTrendPsBuilder_ == null) {
          kztSumTrendPs_ = null;
        } else {
          kztSumTrendPs_ = null;
          kztSumTrendPsBuilder_ = null;
        }
        if (usdSumBuilder_ == null) {
          usdSum_ = null;
        } else {
          usdSum_ = null;
          usdSumBuilder_ = null;
        }
        dealCount_ = 0;

        orderCount_ = 0;

        if (bidPriceBuilder_ == null) {
          bidPrice_ = null;
        } else {
          bidPrice_ = null;
          bidPriceBuilder_ = null;
        }
        if (askPriceBuilder_ == null) {
          askPrice_ = null;
        } else {
          askPrice_ = null;
          askPriceBuilder_ = null;
        }
        bidQty_ = 0;

        askQty_ = 0;

        sessionInternalCode_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_Total_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.Total getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.Total.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.Total build() {
        kz.kase.iris.model.IrisApiTotals.Total result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.Total buildPartial() {
        kz.kase.iris.model.IrisApiTotals.Total result = new kz.kase.iris.model.IrisApiTotals.Total(this);
        result.instrumentId_ = instrumentId_;
        result.instrumentCode_ = instrumentCode_;
        if (priceBuilder_ == null) {
          result.price_ = price_;
        } else {
          result.price_ = priceBuilder_.build();
        }
        if (volumeBuilder_ == null) {
          result.volume_ = volume_;
        } else {
          result.volume_ = volumeBuilder_.build();
        }
        if (kztSumBuilder_ == null) {
          result.kztSum_ = kztSum_;
        } else {
          result.kztSum_ = kztSumBuilder_.build();
        }
        if (kztSumTrendBuilder_ == null) {
          result.kztSumTrend_ = kztSumTrend_;
        } else {
          result.kztSumTrend_ = kztSumTrendBuilder_.build();
        }
        if (kztSumTrendPsBuilder_ == null) {
          result.kztSumTrendPs_ = kztSumTrendPs_;
        } else {
          result.kztSumTrendPs_ = kztSumTrendPsBuilder_.build();
        }
        if (usdSumBuilder_ == null) {
          result.usdSum_ = usdSum_;
        } else {
          result.usdSum_ = usdSumBuilder_.build();
        }
        result.dealCount_ = dealCount_;
        result.orderCount_ = orderCount_;
        if (bidPriceBuilder_ == null) {
          result.bidPrice_ = bidPrice_;
        } else {
          result.bidPrice_ = bidPriceBuilder_.build();
        }
        if (askPriceBuilder_ == null) {
          result.askPrice_ = askPrice_;
        } else {
          result.askPrice_ = askPriceBuilder_.build();
        }
        result.bidQty_ = bidQty_;
        result.askQty_ = askQty_;
        result.sessionInternalCode_ = sessionInternalCode_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.Total) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.Total)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.Total other) {
        if (other == kz.kase.iris.model.IrisApiTotals.Total.getDefaultInstance()) return this;
        if (other.getInstrumentId() != 0) {
          setInstrumentId(other.getInstrumentId());
        }
        if (!other.getInstrumentCode().isEmpty()) {
          instrumentCode_ = other.instrumentCode_;
          onChanged();
        }
        if (other.hasPrice()) {
          mergePrice(other.getPrice());
        }
        if (other.hasVolume()) {
          mergeVolume(other.getVolume());
        }
        if (other.hasKztSum()) {
          mergeKztSum(other.getKztSum());
        }
        if (other.hasKztSumTrend()) {
          mergeKztSumTrend(other.getKztSumTrend());
        }
        if (other.hasKztSumTrendPs()) {
          mergeKztSumTrendPs(other.getKztSumTrendPs());
        }
        if (other.hasUsdSum()) {
          mergeUsdSum(other.getUsdSum());
        }
        if (other.getDealCount() != 0) {
          setDealCount(other.getDealCount());
        }
        if (other.getOrderCount() != 0) {
          setOrderCount(other.getOrderCount());
        }
        if (other.hasBidPrice()) {
          mergeBidPrice(other.getBidPrice());
        }
        if (other.hasAskPrice()) {
          mergeAskPrice(other.getAskPrice());
        }
        if (other.getBidQty() != 0) {
          setBidQty(other.getBidQty());
        }
        if (other.getAskQty() != 0) {
          setAskQty(other.getAskQty());
        }
        if (!other.getSessionInternalCode().isEmpty()) {
          sessionInternalCode_ = other.sessionInternalCode_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.Total parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.Total) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int instrumentId_ ;
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public int getInstrumentId() {
        return instrumentId_;
      }
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public Builder setInstrumentId(int value) {
        
        instrumentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Первичный ключ записи инструмента в &amp;IS_IRIS_Q;.
       * </pre>
       *
       * <code>int32 instrument_id = 1;</code>
       */
      public Builder clearInstrumentId() {
        
        instrumentId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object instrumentCode_ = "";
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string instrument_code = 2;</code>
       */
      public java.lang.String getInstrumentCode() {
        java.lang.Object ref = instrumentCode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instrumentCode_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string instrument_code = 2;</code>
       */
      public com.google.protobuf.ByteString
          getInstrumentCodeBytes() {
        java.lang.Object ref = instrumentCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instrumentCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string instrument_code = 2;</code>
       */
      public Builder setInstrumentCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instrumentCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string instrument_code = 2;</code>
       */
      public Builder clearInstrumentCode() {
        
        instrumentCode_ = getDefaultInstance().getInstrumentCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Код инструмента.
       * </pre>
       *
       * <code>string instrument_code = 2;</code>
       */
      public Builder setInstrumentCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instrumentCode_ = value;
        onChanged();
        return this;
      }

      private kz.kase.iris.model.IrisApiBase.Ohlc price_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder> priceBuilder_;
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public boolean hasPrice() {
        return priceBuilder_ != null || price_ != null;
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Ohlc getPrice() {
        if (priceBuilder_ == null) {
          return price_ == null ? kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : price_;
        } else {
          return priceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public Builder setPrice(kz.kase.iris.model.IrisApiBase.Ohlc value) {
        if (priceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          price_ = value;
          onChanged();
        } else {
          priceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public Builder setPrice(
          kz.kase.iris.model.IrisApiBase.Ohlc.Builder builderForValue) {
        if (priceBuilder_ == null) {
          price_ = builderForValue.build();
          onChanged();
        } else {
          priceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public Builder mergePrice(kz.kase.iris.model.IrisApiBase.Ohlc value) {
        if (priceBuilder_ == null) {
          if (price_ != null) {
            price_ =
              kz.kase.iris.model.IrisApiBase.Ohlc.newBuilder(price_).mergeFrom(value).buildPartial();
          } else {
            price_ = value;
          }
          onChanged();
        } else {
          priceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public Builder clearPrice() {
        if (priceBuilder_ == null) {
          price_ = null;
          onChanged();
        } else {
          price_ = null;
          priceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Ohlc.Builder getPriceBuilder() {
        
        onChanged();
        return getPriceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getPriceOrBuilder() {
        if (priceBuilder_ != null) {
          return priceBuilder_.getMessageOrBuilder();
        } else {
          return price_ == null ?
              kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : price_;
        }
      }
      /**
       * <pre>
       * OHLC-информация по цене.
       * </pre>
       *
       * <code>.IRIS.Ohlc price = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder> 
          getPriceFieldBuilder() {
        if (priceBuilder_ == null) {
          priceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder>(
                  getPrice(),
                  getParentForChildren(),
                  isClean());
          price_ = null;
        }
        return priceBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Ohlc volume_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder> volumeBuilder_;
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public boolean hasVolume() {
        return volumeBuilder_ != null || volume_ != null;
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Ohlc getVolume() {
        if (volumeBuilder_ == null) {
          return volume_ == null ? kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : volume_;
        } else {
          return volumeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public Builder setVolume(kz.kase.iris.model.IrisApiBase.Ohlc value) {
        if (volumeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          volume_ = value;
          onChanged();
        } else {
          volumeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public Builder setVolume(
          kz.kase.iris.model.IrisApiBase.Ohlc.Builder builderForValue) {
        if (volumeBuilder_ == null) {
          volume_ = builderForValue.build();
          onChanged();
        } else {
          volumeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public Builder mergeVolume(kz.kase.iris.model.IrisApiBase.Ohlc value) {
        if (volumeBuilder_ == null) {
          if (volume_ != null) {
            volume_ =
              kz.kase.iris.model.IrisApiBase.Ohlc.newBuilder(volume_).mergeFrom(value).buildPartial();
          } else {
            volume_ = value;
          }
          onChanged();
        } else {
          volumeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public Builder clearVolume() {
        if (volumeBuilder_ == null) {
          volume_ = null;
          onChanged();
        } else {
          volume_ = null;
          volumeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Ohlc.Builder getVolumeBuilder() {
        
        onChanged();
        return getVolumeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.OhlcOrBuilder getVolumeOrBuilder() {
        if (volumeBuilder_ != null) {
          return volumeBuilder_.getMessageOrBuilder();
        } else {
          return volume_ == null ?
              kz.kase.iris.model.IrisApiBase.Ohlc.getDefaultInstance() : volume_;
        }
      }
      /**
       * <pre>
       * OHLC-информация по объему сделок в KZT.
       * </pre>
       *
       * <code>.IRIS.Ohlc volume = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder> 
          getVolumeFieldBuilder() {
        if (volumeBuilder_ == null) {
          volumeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Ohlc, kz.kase.iris.model.IrisApiBase.Ohlc.Builder, kz.kase.iris.model.IrisApiBase.OhlcOrBuilder>(
                  getVolume(),
                  getParentForChildren(),
                  isClean());
          volume_ = null;
        }
        return volumeBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal kztSum_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> kztSumBuilder_;
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public boolean hasKztSum() {
        return kztSumBuilder_ != null || kztSum_ != null;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getKztSum() {
        if (kztSumBuilder_ == null) {
          return kztSum_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSum_;
        } else {
          return kztSumBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public Builder setKztSum(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kztSum_ = value;
          onChanged();
        } else {
          kztSumBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public Builder setKztSum(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (kztSumBuilder_ == null) {
          kztSum_ = builderForValue.build();
          onChanged();
        } else {
          kztSumBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public Builder mergeKztSum(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumBuilder_ == null) {
          if (kztSum_ != null) {
            kztSum_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(kztSum_).mergeFrom(value).buildPartial();
          } else {
            kztSum_ = value;
          }
          onChanged();
        } else {
          kztSumBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public Builder clearKztSum() {
        if (kztSumBuilder_ == null) {
          kztSum_ = null;
          onChanged();
        } else {
          kztSum_ = null;
          kztSumBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getKztSumBuilder() {
        
        onChanged();
        return getKztSumFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumOrBuilder() {
        if (kztSumBuilder_ != null) {
          return kztSumBuilder_.getMessageOrBuilder();
        } else {
          return kztSum_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSum_;
        }
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в KZT.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getKztSumFieldBuilder() {
        if (kztSumBuilder_ == null) {
          kztSumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getKztSum(),
                  getParentForChildren(),
                  isClean());
          kztSum_ = null;
        }
        return kztSumBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal kztSumTrend_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> kztSumTrendBuilder_;
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public boolean hasKztSumTrend() {
        return kztSumTrendBuilder_ != null || kztSumTrend_ != null;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrend() {
        if (kztSumTrendBuilder_ == null) {
          return kztSumTrend_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrend_;
        } else {
          return kztSumTrendBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public Builder setKztSumTrend(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumTrendBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kztSumTrend_ = value;
          onChanged();
        } else {
          kztSumTrendBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public Builder setKztSumTrend(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (kztSumTrendBuilder_ == null) {
          kztSumTrend_ = builderForValue.build();
          onChanged();
        } else {
          kztSumTrendBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public Builder mergeKztSumTrend(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumTrendBuilder_ == null) {
          if (kztSumTrend_ != null) {
            kztSumTrend_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(kztSumTrend_).mergeFrom(value).buildPartial();
          } else {
            kztSumTrend_ = value;
          }
          onChanged();
        } else {
          kztSumTrendBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public Builder clearKztSumTrend() {
        if (kztSumTrendBuilder_ == null) {
          kztSumTrend_ = null;
          onChanged();
        } else {
          kztSumTrend_ = null;
          kztSumTrendBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getKztSumTrendBuilder() {
        
        onChanged();
        return getKztSumTrendFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendOrBuilder() {
        if (kztSumTrendBuilder_ != null) {
          return kztSumTrendBuilder_.getMessageOrBuilder();
        } else {
          return kztSumTrend_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrend_;
        }
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getKztSumTrendFieldBuilder() {
        if (kztSumTrendBuilder_ == null) {
          kztSumTrendBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getKztSumTrend(),
                  getParentForChildren(),
                  isClean());
          kztSumTrend_ = null;
        }
        return kztSumTrendBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal kztSumTrendPs_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> kztSumTrendPsBuilder_;
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public boolean hasKztSumTrendPs() {
        return kztSumTrendPsBuilder_ != null || kztSumTrendPs_ != null;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getKztSumTrendPs() {
        if (kztSumTrendPsBuilder_ == null) {
          return kztSumTrendPs_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrendPs_;
        } else {
          return kztSumTrendPsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public Builder setKztSumTrendPs(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumTrendPsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kztSumTrendPs_ = value;
          onChanged();
        } else {
          kztSumTrendPsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public Builder setKztSumTrendPs(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (kztSumTrendPsBuilder_ == null) {
          kztSumTrendPs_ = builderForValue.build();
          onChanged();
        } else {
          kztSumTrendPsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public Builder mergeKztSumTrendPs(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (kztSumTrendPsBuilder_ == null) {
          if (kztSumTrendPs_ != null) {
            kztSumTrendPs_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(kztSumTrendPs_).mergeFrom(value).buildPartial();
          } else {
            kztSumTrendPs_ = value;
          }
          onChanged();
        } else {
          kztSumTrendPsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public Builder clearKztSumTrendPs() {
        if (kztSumTrendPsBuilder_ == null) {
          kztSumTrendPs_ = null;
          onChanged();
        } else {
          kztSumTrendPs_ = null;
          kztSumTrendPsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getKztSumTrendPsBuilder() {
        
        onChanged();
        return getKztSumTrendPsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getKztSumTrendPsOrBuilder() {
        if (kztSumTrendPsBuilder_ != null) {
          return kztSumTrendPsBuilder_.getMessageOrBuilder();
        } else {
          return kztSumTrendPs_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : kztSumTrendPs_;
        }
      }
      /**
       * <pre>
       * Тренд для суммарного объема торгов за период в KZT по отношению к предыдущему периоду в процентном выражении.
       * </pre>
       *
       * <code>.IRIS.Decimal kzt_sum_trend_ps = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getKztSumTrendPsFieldBuilder() {
        if (kztSumTrendPsBuilder_ == null) {
          kztSumTrendPsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getKztSumTrendPs(),
                  getParentForChildren(),
                  isClean());
          kztSumTrendPs_ = null;
        }
        return kztSumTrendPsBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal usdSum_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> usdSumBuilder_;
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public boolean hasUsdSum() {
        return usdSumBuilder_ != null || usdSum_ != null;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getUsdSum() {
        if (usdSumBuilder_ == null) {
          return usdSum_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : usdSum_;
        } else {
          return usdSumBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public Builder setUsdSum(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (usdSumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          usdSum_ = value;
          onChanged();
        } else {
          usdSumBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public Builder setUsdSum(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (usdSumBuilder_ == null) {
          usdSum_ = builderForValue.build();
          onChanged();
        } else {
          usdSumBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public Builder mergeUsdSum(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (usdSumBuilder_ == null) {
          if (usdSum_ != null) {
            usdSum_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(usdSum_).mergeFrom(value).buildPartial();
          } else {
            usdSum_ = value;
          }
          onChanged();
        } else {
          usdSumBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public Builder clearUsdSum() {
        if (usdSumBuilder_ == null) {
          usdSum_ = null;
          onChanged();
        } else {
          usdSum_ = null;
          usdSumBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getUsdSumBuilder() {
        
        onChanged();
        return getUsdSumFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getUsdSumOrBuilder() {
        if (usdSumBuilder_ != null) {
          return usdSumBuilder_.getMessageOrBuilder();
        } else {
          return usdSum_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : usdSum_;
        }
      }
      /**
       * <pre>
       * Суммарный объем торгов за период в USD.
       * </pre>
       *
       * <code>.IRIS.Decimal usd_sum = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getUsdSumFieldBuilder() {
        if (usdSumBuilder_ == null) {
          usdSumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getUsdSum(),
                  getParentForChildren(),
                  isClean());
          usdSum_ = null;
        }
        return usdSumBuilder_;
      }

      private int dealCount_ ;
      /**
       * <pre>
       * Количество сделок за период.
       * </pre>
       *
       * <code>int32 deal_count = 9;</code>
       */
      public int getDealCount() {
        return dealCount_;
      }
      /**
       * <pre>
       * Количество сделок за период.
       * </pre>
       *
       * <code>int32 deal_count = 9;</code>
       */
      public Builder setDealCount(int value) {
        
        dealCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Количество сделок за период.
       * </pre>
       *
       * <code>int32 deal_count = 9;</code>
       */
      public Builder clearDealCount() {
        
        dealCount_ = 0;
        onChanged();
        return this;
      }

      private int orderCount_ ;
      /**
       * <pre>
       * Количество заявок за период.
       * </pre>
       *
       * <code>int32 order_count = 10;</code>
       */
      public int getOrderCount() {
        return orderCount_;
      }
      /**
       * <pre>
       * Количество заявок за период.
       * </pre>
       *
       * <code>int32 order_count = 10;</code>
       */
      public Builder setOrderCount(int value) {
        
        orderCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Количество заявок за период.
       * </pre>
       *
       * <code>int32 order_count = 10;</code>
       */
      public Builder clearOrderCount() {
        
        orderCount_ = 0;
        onChanged();
        return this;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal bidPrice_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> bidPriceBuilder_;
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public boolean hasBidPrice() {
        return bidPriceBuilder_ != null || bidPrice_ != null;
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getBidPrice() {
        if (bidPriceBuilder_ == null) {
          return bidPrice_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : bidPrice_;
        } else {
          return bidPriceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public Builder setBidPrice(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (bidPriceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bidPrice_ = value;
          onChanged();
        } else {
          bidPriceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public Builder setBidPrice(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (bidPriceBuilder_ == null) {
          bidPrice_ = builderForValue.build();
          onChanged();
        } else {
          bidPriceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public Builder mergeBidPrice(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (bidPriceBuilder_ == null) {
          if (bidPrice_ != null) {
            bidPrice_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(bidPrice_).mergeFrom(value).buildPartial();
          } else {
            bidPrice_ = value;
          }
          onChanged();
        } else {
          bidPriceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public Builder clearBidPrice() {
        if (bidPriceBuilder_ == null) {
          bidPrice_ = null;
          onChanged();
        } else {
          bidPrice_ = null;
          bidPriceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getBidPriceBuilder() {
        
        onChanged();
        return getBidPriceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getBidPriceOrBuilder() {
        if (bidPriceBuilder_ != null) {
          return bidPriceBuilder_.getMessageOrBuilder();
        } else {
          return bidPrice_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : bidPrice_;
        }
      }
      /**
       * <pre>
       * Цена лучшего предложения.
       * </pre>
       *
       * <code>.IRIS.Decimal bid_price = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getBidPriceFieldBuilder() {
        if (bidPriceBuilder_ == null) {
          bidPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getBidPrice(),
                  getParentForChildren(),
                  isClean());
          bidPrice_ = null;
        }
        return bidPriceBuilder_;
      }

      private kz.kase.iris.model.IrisApiBase.Decimal askPrice_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> askPriceBuilder_;
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public boolean hasAskPrice() {
        return askPriceBuilder_ != null || askPrice_ != null;
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal getAskPrice() {
        if (askPriceBuilder_ == null) {
          return askPrice_ == null ? kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : askPrice_;
        } else {
          return askPriceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public Builder setAskPrice(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (askPriceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          askPrice_ = value;
          onChanged();
        } else {
          askPriceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public Builder setAskPrice(
          kz.kase.iris.model.IrisApiBase.Decimal.Builder builderForValue) {
        if (askPriceBuilder_ == null) {
          askPrice_ = builderForValue.build();
          onChanged();
        } else {
          askPriceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public Builder mergeAskPrice(kz.kase.iris.model.IrisApiBase.Decimal value) {
        if (askPriceBuilder_ == null) {
          if (askPrice_ != null) {
            askPrice_ =
              kz.kase.iris.model.IrisApiBase.Decimal.newBuilder(askPrice_).mergeFrom(value).buildPartial();
          } else {
            askPrice_ = value;
          }
          onChanged();
        } else {
          askPriceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public Builder clearAskPrice() {
        if (askPriceBuilder_ == null) {
          askPrice_ = null;
          onChanged();
        } else {
          askPrice_ = null;
          askPriceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Decimal.Builder getAskPriceBuilder() {
        
        onChanged();
        return getAskPriceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DecimalOrBuilder getAskPriceOrBuilder() {
        if (askPriceBuilder_ != null) {
          return askPriceBuilder_.getMessageOrBuilder();
        } else {
          return askPrice_ == null ?
              kz.kase.iris.model.IrisApiBase.Decimal.getDefaultInstance() : askPrice_;
        }
      }
      /**
       * <pre>
       * Цена лучшего спроса.
       * </pre>
       *
       * <code>.IRIS.Decimal ask_price = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder> 
          getAskPriceFieldBuilder() {
        if (askPriceBuilder_ == null) {
          askPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Decimal, kz.kase.iris.model.IrisApiBase.Decimal.Builder, kz.kase.iris.model.IrisApiBase.DecimalOrBuilder>(
                  getAskPrice(),
                  getParentForChildren(),
                  isClean());
          askPrice_ = null;
        }
        return askPriceBuilder_;
      }

      private int bidQty_ ;
      /**
       * <pre>
       * Объем в единицах инструменда для лучшего предложения.
       * </pre>
       *
       * <code>int32 bid_qty = 13;</code>
       */
      public int getBidQty() {
        return bidQty_;
      }
      /**
       * <pre>
       * Объем в единицах инструменда для лучшего предложения.
       * </pre>
       *
       * <code>int32 bid_qty = 13;</code>
       */
      public Builder setBidQty(int value) {
        
        bidQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Объем в единицах инструменда для лучшего предложения.
       * </pre>
       *
       * <code>int32 bid_qty = 13;</code>
       */
      public Builder clearBidQty() {
        
        bidQty_ = 0;
        onChanged();
        return this;
      }

      private int askQty_ ;
      /**
       * <pre>
       * Объем в единицах инструменда для спроса.
       * </pre>
       *
       * <code>int32 ask_qty = 14;</code>
       */
      public int getAskQty() {
        return askQty_;
      }
      /**
       * <pre>
       * Объем в единицах инструменда для спроса.
       * </pre>
       *
       * <code>int32 ask_qty = 14;</code>
       */
      public Builder setAskQty(int value) {
        
        askQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Объем в единицах инструменда для спроса.
       * </pre>
       *
       * <code>int32 ask_qty = 14;</code>
       */
      public Builder clearAskQty() {
        
        askQty_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object sessionInternalCode_ = "";
      /**
       * <pre>
       * Внутренний код состояния торговой сессии в торговой системе.
       * </pre>
       *
       * <code>string session_internal_code = 16;</code>
       */
      public java.lang.String getSessionInternalCode() {
        java.lang.Object ref = sessionInternalCode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sessionInternalCode_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Внутренний код состояния торговой сессии в торговой системе.
       * </pre>
       *
       * <code>string session_internal_code = 16;</code>
       */
      public com.google.protobuf.ByteString
          getSessionInternalCodeBytes() {
        java.lang.Object ref = sessionInternalCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sessionInternalCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Внутренний код состояния торговой сессии в торговой системе.
       * </pre>
       *
       * <code>string session_internal_code = 16;</code>
       */
      public Builder setSessionInternalCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sessionInternalCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Внутренний код состояния торговой сессии в торговой системе.
       * </pre>
       *
       * <code>string session_internal_code = 16;</code>
       */
      public Builder clearSessionInternalCode() {
        
        sessionInternalCode_ = getDefaultInstance().getSessionInternalCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Внутренний код состояния торговой сессии в торговой системе.
       * </pre>
       *
       * <code>string session_internal_code = 16;</code>
       */
      public Builder setSessionInternalCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sessionInternalCode_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.Total)
    }

    // @@protoc_insertion_point(class_scope:IRIS.Total)
    private static final kz.kase.iris.model.IrisApiTotals.Total DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.Total();
    }

    public static kz.kase.iris.model.IrisApiTotals.Total getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Total>
        PARSER = new com.google.protobuf.AbstractParser<Total>() {
      @java.lang.Override
      public Total parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Total(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Total> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Total> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.Total getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsPeriodOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsPeriod)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    boolean hasDay();
    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.Date getDay();
    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.DateOrBuilder getDayOrBuilder();

    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    boolean hasWeek();
    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.Week getWeek();
    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.WeekOrBuilder getWeekOrBuilder();

    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    boolean hasMonth();
    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    kz.kase.iris.model.IrisApiBase.Month getMonth();
    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    kz.kase.iris.model.IrisApiBase.MonthOrBuilder getMonthOrBuilder();

    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    boolean hasQuarter();
    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    kz.kase.iris.model.IrisApiBase.Quarter getQuarter();
    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    kz.kase.iris.model.IrisApiBase.QuarterOrBuilder getQuarterOrBuilder();

    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    boolean hasYear();
    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    kz.kase.iris.model.IrisApiBase.Year getYear();
    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    kz.kase.iris.model.IrisApiBase.YearOrBuilder getYearOrBuilder();

    public kz.kase.iris.model.IrisApiTotals.TotalsPeriod.IntervalCase getIntervalCase();
  }
  /**
   * <pre>
   * Сообщение для указания требуемого периода для выдачи сгруппированной информации о торгах. 
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsPeriod}
   */
  public  static final class TotalsPeriod extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsPeriod)
      TotalsPeriodOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsPeriod.newBuilder() to construct.
    private TotalsPeriod(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsPeriod() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsPeriod(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiBase.Date.Builder subBuilder = null;
              if (intervalCase_ == 1) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Date) interval_).toBuilder();
              }
              interval_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Date.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Date) interval_);
                interval_ = subBuilder.buildPartial();
              }
              intervalCase_ = 1;
              break;
            }
            case 18: {
              kz.kase.iris.model.IrisApiBase.Week.Builder subBuilder = null;
              if (intervalCase_ == 2) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Week) interval_).toBuilder();
              }
              interval_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Week.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Week) interval_);
                interval_ = subBuilder.buildPartial();
              }
              intervalCase_ = 2;
              break;
            }
            case 26: {
              kz.kase.iris.model.IrisApiBase.Month.Builder subBuilder = null;
              if (intervalCase_ == 3) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Month) interval_).toBuilder();
              }
              interval_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Month.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Month) interval_);
                interval_ = subBuilder.buildPartial();
              }
              intervalCase_ = 3;
              break;
            }
            case 34: {
              kz.kase.iris.model.IrisApiBase.Quarter.Builder subBuilder = null;
              if (intervalCase_ == 4) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Quarter) interval_).toBuilder();
              }
              interval_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Quarter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Quarter) interval_);
                interval_ = subBuilder.buildPartial();
              }
              intervalCase_ = 4;
              break;
            }
            case 42: {
              kz.kase.iris.model.IrisApiBase.Year.Builder subBuilder = null;
              if (intervalCase_ == 5) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Year) interval_).toBuilder();
              }
              interval_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Year.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Year) interval_);
                interval_ = subBuilder.buildPartial();
              }
              intervalCase_ = 5;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsPeriod_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsPeriod_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsPeriod.class, kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder.class);
    }

    private int intervalCase_ = 0;
    private java.lang.Object interval_;
    public enum IntervalCase
        implements com.google.protobuf.Internal.EnumLite {
      DAY(1),
      WEEK(2),
      MONTH(3),
      QUARTER(4),
      YEAR(5),
      INTERVAL_NOT_SET(0);
      private final int value;
      private IntervalCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static IntervalCase valueOf(int value) {
        return forNumber(value);
      }

      public static IntervalCase forNumber(int value) {
        switch (value) {
          case 1: return DAY;
          case 2: return WEEK;
          case 3: return MONTH;
          case 4: return QUARTER;
          case 5: return YEAR;
          case 0: return INTERVAL_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public IntervalCase
    getIntervalCase() {
      return IntervalCase.forNumber(
          intervalCase_);
    }

    public static final int DAY_FIELD_NUMBER = 1;
    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    public boolean hasDay() {
      return intervalCase_ == 1;
    }
    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Date getDay() {
      if (intervalCase_ == 1) {
         return (kz.kase.iris.model.IrisApiBase.Date) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
    }
    /**
     * <pre>
     * День. Взаимоисключаемо с week, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Date day = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.DateOrBuilder getDayOrBuilder() {
      if (intervalCase_ == 1) {
         return (kz.kase.iris.model.IrisApiBase.Date) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
    }

    public static final int WEEK_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    public boolean hasWeek() {
      return intervalCase_ == 2;
    }
    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Week getWeek() {
      if (intervalCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Week) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
    }
    /**
     * <pre>
     * Неделя. Взаимоисключаемо с day, month, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Week week = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.WeekOrBuilder getWeekOrBuilder() {
      if (intervalCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Week) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
    }

    public static final int MONTH_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    public boolean hasMonth() {
      return intervalCase_ == 3;
    }
    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Month getMonth() {
      if (intervalCase_ == 3) {
         return (kz.kase.iris.model.IrisApiBase.Month) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
    }
    /**
     * <pre>
     * Месяц. Взаимоисключаемо с day, week, quarter, year.
     * </pre>
     *
     * <code>.IRIS.Month month = 3;</code>
     */
    public kz.kase.iris.model.IrisApiBase.MonthOrBuilder getMonthOrBuilder() {
      if (intervalCase_ == 3) {
         return (kz.kase.iris.model.IrisApiBase.Month) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
    }

    public static final int QUARTER_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    public boolean hasQuarter() {
      return intervalCase_ == 4;
    }
    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Quarter getQuarter() {
      if (intervalCase_ == 4) {
         return (kz.kase.iris.model.IrisApiBase.Quarter) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
    }
    /**
     * <pre>
     * Квартал. Взаимоисключаемо с day, week, month, year.
     * </pre>
     *
     * <code>.IRIS.Quarter quarter = 4;</code>
     */
    public kz.kase.iris.model.IrisApiBase.QuarterOrBuilder getQuarterOrBuilder() {
      if (intervalCase_ == 4) {
         return (kz.kase.iris.model.IrisApiBase.Quarter) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
    }

    public static final int YEAR_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    public boolean hasYear() {
      return intervalCase_ == 5;
    }
    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Year getYear() {
      if (intervalCase_ == 5) {
         return (kz.kase.iris.model.IrisApiBase.Year) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
    }
    /**
     * <pre>
     * Год. Взаимоисключаемо с day, week, month, quarter.
     * </pre>
     *
     * <code>.IRIS.Year year = 5;</code>
     */
    public kz.kase.iris.model.IrisApiBase.YearOrBuilder getYearOrBuilder() {
      if (intervalCase_ == 5) {
         return (kz.kase.iris.model.IrisApiBase.Year) interval_;
      }
      return kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (intervalCase_ == 1) {
        output.writeMessage(1, (kz.kase.iris.model.IrisApiBase.Date) interval_);
      }
      if (intervalCase_ == 2) {
        output.writeMessage(2, (kz.kase.iris.model.IrisApiBase.Week) interval_);
      }
      if (intervalCase_ == 3) {
        output.writeMessage(3, (kz.kase.iris.model.IrisApiBase.Month) interval_);
      }
      if (intervalCase_ == 4) {
        output.writeMessage(4, (kz.kase.iris.model.IrisApiBase.Quarter) interval_);
      }
      if (intervalCase_ == 5) {
        output.writeMessage(5, (kz.kase.iris.model.IrisApiBase.Year) interval_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (intervalCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (kz.kase.iris.model.IrisApiBase.Date) interval_);
      }
      if (intervalCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (kz.kase.iris.model.IrisApiBase.Week) interval_);
      }
      if (intervalCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (kz.kase.iris.model.IrisApiBase.Month) interval_);
      }
      if (intervalCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (kz.kase.iris.model.IrisApiBase.Quarter) interval_);
      }
      if (intervalCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (kz.kase.iris.model.IrisApiBase.Year) interval_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsPeriod)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsPeriod other = (kz.kase.iris.model.IrisApiTotals.TotalsPeriod) obj;

      boolean result = true;
      result = result && getIntervalCase().equals(
          other.getIntervalCase());
      if (!result) return false;
      switch (intervalCase_) {
        case 1:
          result = result && getDay()
              .equals(other.getDay());
          break;
        case 2:
          result = result && getWeek()
              .equals(other.getWeek());
          break;
        case 3:
          result = result && getMonth()
              .equals(other.getMonth());
          break;
        case 4:
          result = result && getQuarter()
              .equals(other.getQuarter());
          break;
        case 5:
          result = result && getYear()
              .equals(other.getYear());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (intervalCase_) {
        case 1:
          hash = (37 * hash) + DAY_FIELD_NUMBER;
          hash = (53 * hash) + getDay().hashCode();
          break;
        case 2:
          hash = (37 * hash) + WEEK_FIELD_NUMBER;
          hash = (53 * hash) + getWeek().hashCode();
          break;
        case 3:
          hash = (37 * hash) + MONTH_FIELD_NUMBER;
          hash = (53 * hash) + getMonth().hashCode();
          break;
        case 4:
          hash = (37 * hash) + QUARTER_FIELD_NUMBER;
          hash = (53 * hash) + getQuarter().hashCode();
          break;
        case 5:
          hash = (37 * hash) + YEAR_FIELD_NUMBER;
          hash = (53 * hash) + getYear().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsPeriod prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Сообщение для указания требуемого периода для выдачи сгруппированной информации о торгах. 
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsPeriod}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsPeriod)
        kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsPeriod_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsPeriod_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsPeriod.class, kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsPeriod.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        intervalCase_ = 0;
        interval_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsPeriod_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriod getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsPeriod.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriod build() {
        kz.kase.iris.model.IrisApiTotals.TotalsPeriod result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriod buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsPeriod result = new kz.kase.iris.model.IrisApiTotals.TotalsPeriod(this);
        if (intervalCase_ == 1) {
          if (dayBuilder_ == null) {
            result.interval_ = interval_;
          } else {
            result.interval_ = dayBuilder_.build();
          }
        }
        if (intervalCase_ == 2) {
          if (weekBuilder_ == null) {
            result.interval_ = interval_;
          } else {
            result.interval_ = weekBuilder_.build();
          }
        }
        if (intervalCase_ == 3) {
          if (monthBuilder_ == null) {
            result.interval_ = interval_;
          } else {
            result.interval_ = monthBuilder_.build();
          }
        }
        if (intervalCase_ == 4) {
          if (quarterBuilder_ == null) {
            result.interval_ = interval_;
          } else {
            result.interval_ = quarterBuilder_.build();
          }
        }
        if (intervalCase_ == 5) {
          if (yearBuilder_ == null) {
            result.interval_ = interval_;
          } else {
            result.interval_ = yearBuilder_.build();
          }
        }
        result.intervalCase_ = intervalCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsPeriod) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsPeriod)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsPeriod other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsPeriod.getDefaultInstance()) return this;
        switch (other.getIntervalCase()) {
          case DAY: {
            mergeDay(other.getDay());
            break;
          }
          case WEEK: {
            mergeWeek(other.getWeek());
            break;
          }
          case MONTH: {
            mergeMonth(other.getMonth());
            break;
          }
          case QUARTER: {
            mergeQuarter(other.getQuarter());
            break;
          }
          case YEAR: {
            mergeYear(other.getYear());
            break;
          }
          case INTERVAL_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsPeriod parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsPeriod) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int intervalCase_ = 0;
      private java.lang.Object interval_;
      public IntervalCase
          getIntervalCase() {
        return IntervalCase.forNumber(
            intervalCase_);
      }

      public Builder clearInterval() {
        intervalCase_ = 0;
        interval_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Date, kz.kase.iris.model.IrisApiBase.Date.Builder, kz.kase.iris.model.IrisApiBase.DateOrBuilder> dayBuilder_;
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public boolean hasDay() {
        return intervalCase_ == 1;
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Date getDay() {
        if (dayBuilder_ == null) {
          if (intervalCase_ == 1) {
            return (kz.kase.iris.model.IrisApiBase.Date) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
        } else {
          if (intervalCase_ == 1) {
            return dayBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public Builder setDay(kz.kase.iris.model.IrisApiBase.Date value) {
        if (dayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          dayBuilder_.setMessage(value);
        }
        intervalCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public Builder setDay(
          kz.kase.iris.model.IrisApiBase.Date.Builder builderForValue) {
        if (dayBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          dayBuilder_.setMessage(builderForValue.build());
        }
        intervalCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public Builder mergeDay(kz.kase.iris.model.IrisApiBase.Date value) {
        if (dayBuilder_ == null) {
          if (intervalCase_ == 1 &&
              interval_ != kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance()) {
            interval_ = kz.kase.iris.model.IrisApiBase.Date.newBuilder((kz.kase.iris.model.IrisApiBase.Date) interval_)
                .mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          if (intervalCase_ == 1) {
            dayBuilder_.mergeFrom(value);
          }
          dayBuilder_.setMessage(value);
        }
        intervalCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public Builder clearDay() {
        if (dayBuilder_ == null) {
          if (intervalCase_ == 1) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
        } else {
          if (intervalCase_ == 1) {
            intervalCase_ = 0;
            interval_ = null;
          }
          dayBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Date.Builder getDayBuilder() {
        return getDayFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.DateOrBuilder getDayOrBuilder() {
        if ((intervalCase_ == 1) && (dayBuilder_ != null)) {
          return dayBuilder_.getMessageOrBuilder();
        } else {
          if (intervalCase_ == 1) {
            return (kz.kase.iris.model.IrisApiBase.Date) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * День. Взаимоисключаемо с week, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Date day = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Date, kz.kase.iris.model.IrisApiBase.Date.Builder, kz.kase.iris.model.IrisApiBase.DateOrBuilder> 
          getDayFieldBuilder() {
        if (dayBuilder_ == null) {
          if (!(intervalCase_ == 1)) {
            interval_ = kz.kase.iris.model.IrisApiBase.Date.getDefaultInstance();
          }
          dayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Date, kz.kase.iris.model.IrisApiBase.Date.Builder, kz.kase.iris.model.IrisApiBase.DateOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Date) interval_,
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        intervalCase_ = 1;
        onChanged();;
        return dayBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Week, kz.kase.iris.model.IrisApiBase.Week.Builder, kz.kase.iris.model.IrisApiBase.WeekOrBuilder> weekBuilder_;
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public boolean hasWeek() {
        return intervalCase_ == 2;
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Week getWeek() {
        if (weekBuilder_ == null) {
          if (intervalCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Week) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
        } else {
          if (intervalCase_ == 2) {
            return weekBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public Builder setWeek(kz.kase.iris.model.IrisApiBase.Week value) {
        if (weekBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          weekBuilder_.setMessage(value);
        }
        intervalCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public Builder setWeek(
          kz.kase.iris.model.IrisApiBase.Week.Builder builderForValue) {
        if (weekBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          weekBuilder_.setMessage(builderForValue.build());
        }
        intervalCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public Builder mergeWeek(kz.kase.iris.model.IrisApiBase.Week value) {
        if (weekBuilder_ == null) {
          if (intervalCase_ == 2 &&
              interval_ != kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance()) {
            interval_ = kz.kase.iris.model.IrisApiBase.Week.newBuilder((kz.kase.iris.model.IrisApiBase.Week) interval_)
                .mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          if (intervalCase_ == 2) {
            weekBuilder_.mergeFrom(value);
          }
          weekBuilder_.setMessage(value);
        }
        intervalCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public Builder clearWeek() {
        if (weekBuilder_ == null) {
          if (intervalCase_ == 2) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
        } else {
          if (intervalCase_ == 2) {
            intervalCase_ = 0;
            interval_ = null;
          }
          weekBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Week.Builder getWeekBuilder() {
        return getWeekFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.WeekOrBuilder getWeekOrBuilder() {
        if ((intervalCase_ == 2) && (weekBuilder_ != null)) {
          return weekBuilder_.getMessageOrBuilder();
        } else {
          if (intervalCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Week) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Неделя. Взаимоисключаемо с day, month, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Week week = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Week, kz.kase.iris.model.IrisApiBase.Week.Builder, kz.kase.iris.model.IrisApiBase.WeekOrBuilder> 
          getWeekFieldBuilder() {
        if (weekBuilder_ == null) {
          if (!(intervalCase_ == 2)) {
            interval_ = kz.kase.iris.model.IrisApiBase.Week.getDefaultInstance();
          }
          weekBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Week, kz.kase.iris.model.IrisApiBase.Week.Builder, kz.kase.iris.model.IrisApiBase.WeekOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Week) interval_,
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        intervalCase_ = 2;
        onChanged();;
        return weekBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Month, kz.kase.iris.model.IrisApiBase.Month.Builder, kz.kase.iris.model.IrisApiBase.MonthOrBuilder> monthBuilder_;
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public boolean hasMonth() {
        return intervalCase_ == 3;
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Month getMonth() {
        if (monthBuilder_ == null) {
          if (intervalCase_ == 3) {
            return (kz.kase.iris.model.IrisApiBase.Month) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
        } else {
          if (intervalCase_ == 3) {
            return monthBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public Builder setMonth(kz.kase.iris.model.IrisApiBase.Month value) {
        if (monthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          monthBuilder_.setMessage(value);
        }
        intervalCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public Builder setMonth(
          kz.kase.iris.model.IrisApiBase.Month.Builder builderForValue) {
        if (monthBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          monthBuilder_.setMessage(builderForValue.build());
        }
        intervalCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public Builder mergeMonth(kz.kase.iris.model.IrisApiBase.Month value) {
        if (monthBuilder_ == null) {
          if (intervalCase_ == 3 &&
              interval_ != kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance()) {
            interval_ = kz.kase.iris.model.IrisApiBase.Month.newBuilder((kz.kase.iris.model.IrisApiBase.Month) interval_)
                .mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          if (intervalCase_ == 3) {
            monthBuilder_.mergeFrom(value);
          }
          monthBuilder_.setMessage(value);
        }
        intervalCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public Builder clearMonth() {
        if (monthBuilder_ == null) {
          if (intervalCase_ == 3) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
        } else {
          if (intervalCase_ == 3) {
            intervalCase_ = 0;
            interval_ = null;
          }
          monthBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Month.Builder getMonthBuilder() {
        return getMonthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      public kz.kase.iris.model.IrisApiBase.MonthOrBuilder getMonthOrBuilder() {
        if ((intervalCase_ == 3) && (monthBuilder_ != null)) {
          return monthBuilder_.getMessageOrBuilder();
        } else {
          if (intervalCase_ == 3) {
            return (kz.kase.iris.model.IrisApiBase.Month) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Месяц. Взаимоисключаемо с day, week, quarter, year.
       * </pre>
       *
       * <code>.IRIS.Month month = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Month, kz.kase.iris.model.IrisApiBase.Month.Builder, kz.kase.iris.model.IrisApiBase.MonthOrBuilder> 
          getMonthFieldBuilder() {
        if (monthBuilder_ == null) {
          if (!(intervalCase_ == 3)) {
            interval_ = kz.kase.iris.model.IrisApiBase.Month.getDefaultInstance();
          }
          monthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Month, kz.kase.iris.model.IrisApiBase.Month.Builder, kz.kase.iris.model.IrisApiBase.MonthOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Month) interval_,
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        intervalCase_ = 3;
        onChanged();;
        return monthBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Quarter, kz.kase.iris.model.IrisApiBase.Quarter.Builder, kz.kase.iris.model.IrisApiBase.QuarterOrBuilder> quarterBuilder_;
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public boolean hasQuarter() {
        return intervalCase_ == 4;
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Quarter getQuarter() {
        if (quarterBuilder_ == null) {
          if (intervalCase_ == 4) {
            return (kz.kase.iris.model.IrisApiBase.Quarter) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
        } else {
          if (intervalCase_ == 4) {
            return quarterBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public Builder setQuarter(kz.kase.iris.model.IrisApiBase.Quarter value) {
        if (quarterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          quarterBuilder_.setMessage(value);
        }
        intervalCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public Builder setQuarter(
          kz.kase.iris.model.IrisApiBase.Quarter.Builder builderForValue) {
        if (quarterBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          quarterBuilder_.setMessage(builderForValue.build());
        }
        intervalCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public Builder mergeQuarter(kz.kase.iris.model.IrisApiBase.Quarter value) {
        if (quarterBuilder_ == null) {
          if (intervalCase_ == 4 &&
              interval_ != kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance()) {
            interval_ = kz.kase.iris.model.IrisApiBase.Quarter.newBuilder((kz.kase.iris.model.IrisApiBase.Quarter) interval_)
                .mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          if (intervalCase_ == 4) {
            quarterBuilder_.mergeFrom(value);
          }
          quarterBuilder_.setMessage(value);
        }
        intervalCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public Builder clearQuarter() {
        if (quarterBuilder_ == null) {
          if (intervalCase_ == 4) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
        } else {
          if (intervalCase_ == 4) {
            intervalCase_ = 0;
            interval_ = null;
          }
          quarterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Quarter.Builder getQuarterBuilder() {
        return getQuarterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      public kz.kase.iris.model.IrisApiBase.QuarterOrBuilder getQuarterOrBuilder() {
        if ((intervalCase_ == 4) && (quarterBuilder_ != null)) {
          return quarterBuilder_.getMessageOrBuilder();
        } else {
          if (intervalCase_ == 4) {
            return (kz.kase.iris.model.IrisApiBase.Quarter) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Квартал. Взаимоисключаемо с day, week, month, year.
       * </pre>
       *
       * <code>.IRIS.Quarter quarter = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Quarter, kz.kase.iris.model.IrisApiBase.Quarter.Builder, kz.kase.iris.model.IrisApiBase.QuarterOrBuilder> 
          getQuarterFieldBuilder() {
        if (quarterBuilder_ == null) {
          if (!(intervalCase_ == 4)) {
            interval_ = kz.kase.iris.model.IrisApiBase.Quarter.getDefaultInstance();
          }
          quarterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Quarter, kz.kase.iris.model.IrisApiBase.Quarter.Builder, kz.kase.iris.model.IrisApiBase.QuarterOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Quarter) interval_,
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        intervalCase_ = 4;
        onChanged();;
        return quarterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Year, kz.kase.iris.model.IrisApiBase.Year.Builder, kz.kase.iris.model.IrisApiBase.YearOrBuilder> yearBuilder_;
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public boolean hasYear() {
        return intervalCase_ == 5;
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Year getYear() {
        if (yearBuilder_ == null) {
          if (intervalCase_ == 5) {
            return (kz.kase.iris.model.IrisApiBase.Year) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
        } else {
          if (intervalCase_ == 5) {
            return yearBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public Builder setYear(kz.kase.iris.model.IrisApiBase.Year value) {
        if (yearBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          yearBuilder_.setMessage(value);
        }
        intervalCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public Builder setYear(
          kz.kase.iris.model.IrisApiBase.Year.Builder builderForValue) {
        if (yearBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          yearBuilder_.setMessage(builderForValue.build());
        }
        intervalCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public Builder mergeYear(kz.kase.iris.model.IrisApiBase.Year value) {
        if (yearBuilder_ == null) {
          if (intervalCase_ == 5 &&
              interval_ != kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance()) {
            interval_ = kz.kase.iris.model.IrisApiBase.Year.newBuilder((kz.kase.iris.model.IrisApiBase.Year) interval_)
                .mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          if (intervalCase_ == 5) {
            yearBuilder_.mergeFrom(value);
          }
          yearBuilder_.setMessage(value);
        }
        intervalCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public Builder clearYear() {
        if (yearBuilder_ == null) {
          if (intervalCase_ == 5) {
            intervalCase_ = 0;
            interval_ = null;
            onChanged();
          }
        } else {
          if (intervalCase_ == 5) {
            intervalCase_ = 0;
            interval_ = null;
          }
          yearBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Year.Builder getYearBuilder() {
        return getYearFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      public kz.kase.iris.model.IrisApiBase.YearOrBuilder getYearOrBuilder() {
        if ((intervalCase_ == 5) && (yearBuilder_ != null)) {
          return yearBuilder_.getMessageOrBuilder();
        } else {
          if (intervalCase_ == 5) {
            return (kz.kase.iris.model.IrisApiBase.Year) interval_;
          }
          return kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Год. Взаимоисключаемо с day, week, month, quarter.
       * </pre>
       *
       * <code>.IRIS.Year year = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Year, kz.kase.iris.model.IrisApiBase.Year.Builder, kz.kase.iris.model.IrisApiBase.YearOrBuilder> 
          getYearFieldBuilder() {
        if (yearBuilder_ == null) {
          if (!(intervalCase_ == 5)) {
            interval_ = kz.kase.iris.model.IrisApiBase.Year.getDefaultInstance();
          }
          yearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Year, kz.kase.iris.model.IrisApiBase.Year.Builder, kz.kase.iris.model.IrisApiBase.YearOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Year) interval_,
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        intervalCase_ = 5;
        onChanged();;
        return yearBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsPeriod)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsPeriod)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsPeriod DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsPeriod();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsPeriod getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsPeriod>
        PARSER = new com.google.protobuf.AbstractParser<TotalsPeriod>() {
      @java.lang.Override
      public TotalsPeriod parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsPeriod(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsPeriod> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsPeriod> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsPeriod getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    boolean hasPeriod();
    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsPeriod getPeriod();
    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder getPeriodOrBuilder();

    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    boolean hasFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    kz.kase.iris.model.IrisApiDeals.DealsBaseFilter getFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder getFilterOrBuilder();
  }
  /**
   * <pre>
   * Информация для фильтрации данных о торгах. 
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsFilter}
   */
  public  static final class TotalsFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsFilter)
      TotalsFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsFilter.newBuilder() to construct.
    private TotalsFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsFilter() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder subBuilder = null;
              if (period_ != null) {
                subBuilder = period_.toBuilder();
              }
              period_ = input.readMessage(kz.kase.iris.model.IrisApiTotals.TotalsPeriod.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(period_);
                period_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.class, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder.class);
    }

    public static final int PERIOD_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiTotals.TotalsPeriod period_;
    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    public boolean hasPeriod() {
      return period_ != null;
    }
    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsPeriod getPeriod() {
      return period_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsPeriod.getDefaultInstance() : period_;
    }
    /**
     * <pre>
     * Требуемый период для группировки данных.
     * </pre>
     *
     * <code>.IRIS.TotalsPeriod period = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder getPeriodOrBuilder() {
      return getPeriod();
    }

    public static final int FILTER_FIELD_NUMBER = 2;
    private kz.kase.iris.model.IrisApiDeals.DealsBaseFilter filter_;
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    public kz.kase.iris.model.IrisApiDeals.DealsBaseFilter getFilter() {
      return filter_ == null ? kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.DealsBaseFilter filter = 2;</code>
     */
    public kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (period_ != null) {
        output.writeMessage(1, getPeriod());
      }
      if (filter_ != null) {
        output.writeMessage(2, getFilter());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (period_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPeriod());
      }
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFilter());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsFilter)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsFilter other = (kz.kase.iris.model.IrisApiTotals.TotalsFilter) obj;

      boolean result = true;
      result = result && (hasPeriod() == other.hasPeriod());
      if (hasPeriod()) {
        result = result && getPeriod()
            .equals(other.getPeriod());
      }
      result = result && (hasFilter() == other.hasFilter());
      if (hasFilter()) {
        result = result && getFilter()
            .equals(other.getFilter());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPeriod()) {
        hash = (37 * hash) + PERIOD_FIELD_NUMBER;
        hash = (53 * hash) + getPeriod().hashCode();
      }
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Информация для фильтрации данных о торгах. 
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsFilter)
        kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsFilter.class, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (periodBuilder_ == null) {
          period_ = null;
        } else {
          period_ = null;
          periodBuilder_ = null;
        }
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsFilter_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter build() {
        kz.kase.iris.model.IrisApiTotals.TotalsFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsFilter result = new kz.kase.iris.model.IrisApiTotals.TotalsFilter(this);
        if (periodBuilder_ == null) {
          result.period_ = period_;
        } else {
          result.period_ = periodBuilder_.build();
        }
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsFilter) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsFilter other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance()) return this;
        if (other.hasPeriod()) {
          mergePeriod(other.getPeriod());
        }
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private kz.kase.iris.model.IrisApiTotals.TotalsPeriod period_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsPeriod, kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder, kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder> periodBuilder_;
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public boolean hasPeriod() {
        return periodBuilder_ != null || period_ != null;
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriod getPeriod() {
        if (periodBuilder_ == null) {
          return period_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsPeriod.getDefaultInstance() : period_;
        } else {
          return periodBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public Builder setPeriod(kz.kase.iris.model.IrisApiTotals.TotalsPeriod value) {
        if (periodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          period_ = value;
          onChanged();
        } else {
          periodBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public Builder setPeriod(
          kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder builderForValue) {
        if (periodBuilder_ == null) {
          period_ = builderForValue.build();
          onChanged();
        } else {
          periodBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public Builder mergePeriod(kz.kase.iris.model.IrisApiTotals.TotalsPeriod value) {
        if (periodBuilder_ == null) {
          if (period_ != null) {
            period_ =
              kz.kase.iris.model.IrisApiTotals.TotalsPeriod.newBuilder(period_).mergeFrom(value).buildPartial();
          } else {
            period_ = value;
          }
          onChanged();
        } else {
          periodBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public Builder clearPeriod() {
        if (periodBuilder_ == null) {
          period_ = null;
          onChanged();
        } else {
          period_ = null;
          periodBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder getPeriodBuilder() {
        
        onChanged();
        return getPeriodFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder getPeriodOrBuilder() {
        if (periodBuilder_ != null) {
          return periodBuilder_.getMessageOrBuilder();
        } else {
          return period_ == null ?
              kz.kase.iris.model.IrisApiTotals.TotalsPeriod.getDefaultInstance() : period_;
        }
      }
      /**
       * <pre>
       * Требуемый период для группировки данных.
       * </pre>
       *
       * <code>.IRIS.TotalsPeriod period = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsPeriod, kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder, kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder> 
          getPeriodFieldBuilder() {
        if (periodBuilder_ == null) {
          periodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiTotals.TotalsPeriod, kz.kase.iris.model.IrisApiTotals.TotalsPeriod.Builder, kz.kase.iris.model.IrisApiTotals.TotalsPeriodOrBuilder>(
                  getPeriod(),
                  getParentForChildren(),
                  isClean());
          period_ = null;
        }
        return periodBuilder_;
      }

      private kz.kase.iris.model.IrisApiDeals.DealsBaseFilter filter_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiDeals.DealsBaseFilter, kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder, kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder> filterBuilder_;
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public kz.kase.iris.model.IrisApiDeals.DealsBaseFilter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public Builder setFilter(kz.kase.iris.model.IrisApiDeals.DealsBaseFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public Builder setFilter(
          kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public Builder mergeFilter(kz.kase.iris.model.IrisApiDeals.DealsBaseFilter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      public kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.DealsBaseFilter filter = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiDeals.DealsBaseFilter, kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder, kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiDeals.DealsBaseFilter, kz.kase.iris.model.IrisApiDeals.DealsBaseFilter.Builder, kz.kase.iris.model.IrisApiDeals.DealsBaseFilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsFilter)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsFilter)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsFilter();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsFilter>
        PARSER = new com.google.protobuf.AbstractParser<TotalsFilter>() {
      @java.lang.Override
      public TotalsFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsCountRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsCountRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    boolean hasFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder();
  }
  /**
   * <pre>
   **
   * Запрос на получение информации о количестве сделок подходящих под условия фильтрации.
   * Примечание: Возвращаемое количество учитывает не только ограничения заданные в фильтре, но и ограничения наложенные на выполняющего запрос пользователя.
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsCountRequest}
   */
  public  static final class TotalsCountRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsCountRequest)
      TotalsCountRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsCountRequest.newBuilder() to construct.
    private TotalsCountRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsCountRequest() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsCountRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(kz.kase.iris.model.IrisApiTotals.TotalsFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.class, kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.Builder.class);
    }

    public static final int FILTER_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiTotals.TotalsFilter filter_;
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter() {
      return filter_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (filter_ != null) {
        output.writeMessage(1, getFilter());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFilter());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsCountRequest)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsCountRequest other = (kz.kase.iris.model.IrisApiTotals.TotalsCountRequest) obj;

      boolean result = true;
      result = result && (hasFilter() == other.hasFilter());
      if (hasFilter()) {
        result = result && getFilter()
            .equals(other.getFilter());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsCountRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * Запрос на получение информации о количестве сделок подходящих под условия фильтрации.
     * Примечание: Возвращаемое количество учитывает не только ограничения заданные в фильтре, но и ограничения наложенные на выполняющего запрос пользователя.
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsCountRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsCountRequest)
        kz.kase.iris.model.IrisApiTotals.TotalsCountRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.class, kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountRequest_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountRequest getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountRequest build() {
        kz.kase.iris.model.IrisApiTotals.TotalsCountRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountRequest buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsCountRequest result = new kz.kase.iris.model.IrisApiTotals.TotalsCountRequest(this);
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsCountRequest) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsCountRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsCountRequest other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsCountRequest.getDefaultInstance()) return this;
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsCountRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsCountRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private kz.kase.iris.model.IrisApiTotals.TotalsFilter filter_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder> filterBuilder_;
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder setFilter(kz.kase.iris.model.IrisApiTotals.TotalsFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder setFilter(
          kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder mergeFilter(kz.kase.iris.model.IrisApiTotals.TotalsFilter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsCountRequest)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsCountRequest)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsCountRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsCountRequest();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsCountRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsCountRequest>
        PARSER = new com.google.protobuf.AbstractParser<TotalsCountRequest>() {
      @java.lang.Override
      public TotalsCountRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsCountRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsCountRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsCountRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsCountRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsCountReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsCountReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Количество записей подходящих под условие заданное в запросе.
     * </pre>
     *
     * <code>int32 count = 1;</code>
     */
    int getCount();
  }
  /**
   * <pre>
   * Ответ с информацией о количестве сделок. 
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsCountReply}
   */
  public  static final class TotalsCountReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsCountReply)
      TotalsCountReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsCountReply.newBuilder() to construct.
    private TotalsCountReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsCountReply() {
      count_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsCountReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              count_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsCountReply.class, kz.kase.iris.model.IrisApiTotals.TotalsCountReply.Builder.class);
    }

    public static final int COUNT_FIELD_NUMBER = 1;
    private int count_;
    /**
     * <pre>
     * Количество записей подходящих под условие заданное в запросе.
     * </pre>
     *
     * <code>int32 count = 1;</code>
     */
    public int getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (count_ != 0) {
        output.writeInt32(1, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (count_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsCountReply)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsCountReply other = (kz.kase.iris.model.IrisApiTotals.TotalsCountReply) obj;

      boolean result = true;
      result = result && (getCount()
          == other.getCount());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsCountReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Ответ с информацией о количестве сделок. 
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsCountReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsCountReply)
        kz.kase.iris.model.IrisApiTotals.TotalsCountReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsCountReply.class, kz.kase.iris.model.IrisApiTotals.TotalsCountReply.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsCountReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        count_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsCountReply_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountReply getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsCountReply.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountReply build() {
        kz.kase.iris.model.IrisApiTotals.TotalsCountReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsCountReply buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsCountReply result = new kz.kase.iris.model.IrisApiTotals.TotalsCountReply(this);
        result.count_ = count_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsCountReply) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsCountReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsCountReply other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsCountReply.getDefaultInstance()) return this;
        if (other.getCount() != 0) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsCountReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsCountReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int count_ ;
      /**
       * <pre>
       * Количество записей подходящих под условие заданное в запросе.
       * </pre>
       *
       * <code>int32 count = 1;</code>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <pre>
       * Количество записей подходящих под условие заданное в запросе.
       * </pre>
       *
       * <code>int32 count = 1;</code>
       */
      public Builder setCount(int value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Количество записей подходящих под условие заданное в запросе.
       * </pre>
       *
       * <code>int32 count = 1;</code>
       */
      public Builder clearCount() {
        
        count_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsCountReply)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsCountReply)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsCountReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsCountReply();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsCountReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsCountReply>
        PARSER = new com.google.protobuf.AbstractParser<TotalsCountReply>() {
      @java.lang.Override
      public TotalsCountReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsCountReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsCountReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsCountReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsCountReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    boolean hasFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter();
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder();

    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    boolean hasRange();
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.Range getRange();
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder();

    /**
     * <pre>
     * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
     * Взаимоисключаемо с range.
     * </pre>
     *
     * <code>int32 bandle = 3;</code>
     */
    int getBandle();

    public kz.kase.iris.model.IrisApiTotals.TotalsRequest.RecordsCase getRecordsCase();
  }
  /**
   * <pre>
   * Запрос на получение информации о сделках. 
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsRequest}
   */
  public  static final class TotalsRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsRequest)
      TotalsRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsRequest.newBuilder() to construct.
    private TotalsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsRequest() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(kz.kase.iris.model.IrisApiTotals.TotalsFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              kz.kase.iris.model.IrisApiBase.Range.Builder subBuilder = null;
              if (recordsCase_ == 2) {
                subBuilder = ((kz.kase.iris.model.IrisApiBase.Range) records_).toBuilder();
              }
              records_ =
                  input.readMessage(kz.kase.iris.model.IrisApiBase.Range.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((kz.kase.iris.model.IrisApiBase.Range) records_);
                records_ = subBuilder.buildPartial();
              }
              recordsCase_ = 2;
              break;
            }
            case 24: {
              recordsCase_ = 3;
              records_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsRequest.class, kz.kase.iris.model.IrisApiTotals.TotalsRequest.Builder.class);
    }

    private int recordsCase_ = 0;
    private java.lang.Object records_;
    public enum RecordsCase
        implements com.google.protobuf.Internal.EnumLite {
      RANGE(2),
      BANDLE(3),
      RECORDS_NOT_SET(0);
      private final int value;
      private RecordsCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RecordsCase valueOf(int value) {
        return forNumber(value);
      }

      public static RecordsCase forNumber(int value) {
        switch (value) {
          case 2: return RANGE;
          case 3: return BANDLE;
          case 0: return RECORDS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RecordsCase
    getRecordsCase() {
      return RecordsCase.forNumber(
          recordsCase_);
    }

    public static final int FILTER_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiTotals.TotalsFilter filter_;
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter() {
      return filter_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
     * </pre>
     *
     * <code>.IRIS.TotalsFilter filter = 1;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int RANGE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public boolean hasRange() {
      return recordsCase_ == 2;
    }
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Range getRange() {
      if (recordsCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Range) records_;
      }
      return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
    }
    /**
     * <pre>
     * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
     * Взаимоисключаемо с bandle.
     * </pre>
     *
     * <code>.IRIS.Range range = 2;</code>
     */
    public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
      if (recordsCase_ == 2) {
         return (kz.kase.iris.model.IrisApiBase.Range) records_;
      }
      return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
    }

    public static final int BANDLE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
     * Взаимоисключаемо с range.
     * </pre>
     *
     * <code>int32 bandle = 3;</code>
     */
    public int getBandle() {
      if (recordsCase_ == 3) {
        return (java.lang.Integer) records_;
      }
      return 0;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (filter_ != null) {
        output.writeMessage(1, getFilter());
      }
      if (recordsCase_ == 2) {
        output.writeMessage(2, (kz.kase.iris.model.IrisApiBase.Range) records_);
      }
      if (recordsCase_ == 3) {
        output.writeInt32(
            3, (int)((java.lang.Integer) records_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFilter());
      }
      if (recordsCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (kz.kase.iris.model.IrisApiBase.Range) records_);
      }
      if (recordsCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              3, (int)((java.lang.Integer) records_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsRequest)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsRequest other = (kz.kase.iris.model.IrisApiTotals.TotalsRequest) obj;

      boolean result = true;
      result = result && (hasFilter() == other.hasFilter());
      if (hasFilter()) {
        result = result && getFilter()
            .equals(other.getFilter());
      }
      result = result && getRecordsCase().equals(
          other.getRecordsCase());
      if (!result) return false;
      switch (recordsCase_) {
        case 2:
          result = result && getRange()
              .equals(other.getRange());
          break;
        case 3:
          result = result && (getBandle()
              == other.getBandle());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      switch (recordsCase_) {
        case 2:
          hash = (37 * hash) + RANGE_FIELD_NUMBER;
          hash = (53 * hash) + getRange().hashCode();
          break;
        case 3:
          hash = (37 * hash) + BANDLE_FIELD_NUMBER;
          hash = (53 * hash) + getBandle();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Запрос на получение информации о сделках. 
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsRequest)
        kz.kase.iris.model.IrisApiTotals.TotalsRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsRequest.class, kz.kase.iris.model.IrisApiTotals.TotalsRequest.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        recordsCase_ = 0;
        records_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsRequest_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsRequest getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsRequest.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsRequest build() {
        kz.kase.iris.model.IrisApiTotals.TotalsRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsRequest buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsRequest result = new kz.kase.iris.model.IrisApiTotals.TotalsRequest(this);
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        if (recordsCase_ == 2) {
          if (rangeBuilder_ == null) {
            result.records_ = records_;
          } else {
            result.records_ = rangeBuilder_.build();
          }
        }
        if (recordsCase_ == 3) {
          result.records_ = records_;
        }
        result.recordsCase_ = recordsCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsRequest) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsRequest other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsRequest.getDefaultInstance()) return this;
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        switch (other.getRecordsCase()) {
          case RANGE: {
            mergeRange(other.getRange());
            break;
          }
          case BANDLE: {
            setBandle(other.getBandle());
            break;
          }
          case RECORDS_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int recordsCase_ = 0;
      private java.lang.Object records_;
      public RecordsCase
          getRecordsCase() {
        return RecordsCase.forNumber(
            recordsCase_);
      }

      public Builder clearRecords() {
        recordsCase_ = 0;
        records_ = null;
        onChanged();
        return this;
      }


      private kz.kase.iris.model.IrisApiTotals.TotalsFilter filter_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder> filterBuilder_;
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder setFilter(kz.kase.iris.model.IrisApiTotals.TotalsFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder setFilter(
          kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder mergeFilter(kz.kase.iris.model.IrisApiTotals.TotalsFilter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              kz.kase.iris.model.IrisApiTotals.TotalsFilter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * Фильтр для запрашиваемого списка в разрезе интересующих сделок. Ограничения по заявкам для расчета bid и offer будут определены в соответствии с ограничениями по сделкам.
       * </pre>
       *
       * <code>.IRIS.TotalsFilter filter = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiTotals.TotalsFilter, kz.kase.iris.model.IrisApiTotals.TotalsFilter.Builder, kz.kase.iris.model.IrisApiTotals.TotalsFilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> rangeBuilder_;
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public boolean hasRange() {
        return recordsCase_ == 2;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range getRange() {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Range) records_;
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        } else {
          if (recordsCase_ == 2) {
            return rangeBuilder_.getMessage();
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder setRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          records_ = value;
          onChanged();
        } else {
          rangeBuilder_.setMessage(value);
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder setRange(
          kz.kase.iris.model.IrisApiBase.Range.Builder builderForValue) {
        if (rangeBuilder_ == null) {
          records_ = builderForValue.build();
          onChanged();
        } else {
          rangeBuilder_.setMessage(builderForValue.build());
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder mergeRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2 &&
              records_ != kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance()) {
            records_ = kz.kase.iris.model.IrisApiBase.Range.newBuilder((kz.kase.iris.model.IrisApiBase.Range) records_)
                .mergeFrom(value).buildPartial();
          } else {
            records_ = value;
          }
          onChanged();
        } else {
          if (recordsCase_ == 2) {
            rangeBuilder_.mergeFrom(value);
          }
          rangeBuilder_.setMessage(value);
        }
        recordsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public Builder clearRange() {
        if (rangeBuilder_ == null) {
          if (recordsCase_ == 2) {
            recordsCase_ = 0;
            records_ = null;
            onChanged();
          }
        } else {
          if (recordsCase_ == 2) {
            recordsCase_ = 0;
            records_ = null;
          }
          rangeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range.Builder getRangeBuilder() {
        return getRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
        if ((recordsCase_ == 2) && (rangeBuilder_ != null)) {
          return rangeBuilder_.getMessageOrBuilder();
        } else {
          if (recordsCase_ == 2) {
            return (kz.kase.iris.model.IrisApiBase.Range) records_;
          }
          return kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Указание требуемого диапазона записей. В ответ на запрос будут переданы записи подходящие под заданный фильтр и входящие в указанный в параметре диапазон.
       * Взаимоисключаемо с bandle.
       * </pre>
       *
       * <code>.IRIS.Range range = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> 
          getRangeFieldBuilder() {
        if (rangeBuilder_ == null) {
          if (!(recordsCase_ == 2)) {
            records_ = kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance();
          }
          rangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder>(
                  (kz.kase.iris.model.IrisApiBase.Range) records_,
                  getParentForChildren(),
                  isClean());
          records_ = null;
        }
        recordsCase_ = 2;
        onChanged();;
        return rangeBuilder_;
      }

      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public int getBandle() {
        if (recordsCase_ == 3) {
          return (java.lang.Integer) records_;
        }
        return 0;
      }
      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public Builder setBandle(int value) {
        recordsCase_ = 3;
        records_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Указание размера передаваемых пакетов записей. В ответ на запрос будут переданы все записи подходящие под заданный фильтр пакетами указанного в параметре размера.
       * Взаимоисключаемо с range.
       * </pre>
       *
       * <code>int32 bandle = 3;</code>
       */
      public Builder clearBandle() {
        if (recordsCase_ == 3) {
          recordsCase_ = 0;
          records_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsRequest)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsRequest)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsRequest();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsRequest>
        PARSER = new com.google.protobuf.AbstractParser<TotalsRequest>() {
      @java.lang.Override
      public TotalsRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TotalsReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IRIS.TotalsReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    boolean hasRange();
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.Range getRange();
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder();

    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    java.util.List<kz.kase.iris.model.IrisApiTotals.Total> 
        getTotalsList();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    kz.kase.iris.model.IrisApiTotals.Total getTotals(int index);
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    int getTotalsCount();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    java.util.List<? extends kz.kase.iris.model.IrisApiTotals.TotalOrBuilder> 
        getTotalsOrBuilderList();
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    kz.kase.iris.model.IrisApiTotals.TotalOrBuilder getTotalsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Ответ с информацией о торгах, сгруппированной за период. 
   * </pre>
   *
   * Protobuf type {@code IRIS.TotalsReply}
   */
  public  static final class TotalsReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:IRIS.TotalsReply)
      TotalsReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TotalsReply.newBuilder() to construct.
    private TotalsReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TotalsReply() {
      totals_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TotalsReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              kz.kase.iris.model.IrisApiBase.Range.Builder subBuilder = null;
              if (range_ != null) {
                subBuilder = range_.toBuilder();
              }
              range_ = input.readMessage(kz.kase.iris.model.IrisApiBase.Range.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(range_);
                range_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                totals_ = new java.util.ArrayList<kz.kase.iris.model.IrisApiTotals.Total>();
                mutable_bitField0_ |= 0x00000002;
              }
              totals_.add(
                  input.readMessage(kz.kase.iris.model.IrisApiTotals.Total.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          totals_ = java.util.Collections.unmodifiableList(totals_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.kase.iris.model.IrisApiTotals.TotalsReply.class, kz.kase.iris.model.IrisApiTotals.TotalsReply.Builder.class);
    }

    private int bitField0_;
    public static final int RANGE_FIELD_NUMBER = 1;
    private kz.kase.iris.model.IrisApiBase.Range range_;
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public boolean hasRange() {
      return range_ != null;
    }
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.Range getRange() {
      return range_ == null ? kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
    }
    /**
     * <pre>
     * Диапазон записей в ответе.
     * </pre>
     *
     * <code>.IRIS.Range range = 1;</code>
     */
    public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
      return getRange();
    }

    public static final int TOTALS_FIELD_NUMBER = 2;
    private java.util.List<kz.kase.iris.model.IrisApiTotals.Total> totals_;
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    public java.util.List<kz.kase.iris.model.IrisApiTotals.Total> getTotalsList() {
      return totals_;
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    public java.util.List<? extends kz.kase.iris.model.IrisApiTotals.TotalOrBuilder> 
        getTotalsOrBuilderList() {
      return totals_;
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    public int getTotalsCount() {
      return totals_.size();
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.Total getTotals(int index) {
      return totals_.get(index);
    }
    /**
     * <pre>
     * Список сделок.
     * </pre>
     *
     * <code>repeated .IRIS.Total totals = 2;</code>
     */
    public kz.kase.iris.model.IrisApiTotals.TotalOrBuilder getTotalsOrBuilder(
        int index) {
      return totals_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (range_ != null) {
        output.writeMessage(1, getRange());
      }
      for (int i = 0; i < totals_.size(); i++) {
        output.writeMessage(2, totals_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (range_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRange());
      }
      for (int i = 0; i < totals_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, totals_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof kz.kase.iris.model.IrisApiTotals.TotalsReply)) {
        return super.equals(obj);
      }
      kz.kase.iris.model.IrisApiTotals.TotalsReply other = (kz.kase.iris.model.IrisApiTotals.TotalsReply) obj;

      boolean result = true;
      result = result && (hasRange() == other.hasRange());
      if (hasRange()) {
        result = result && getRange()
            .equals(other.getRange());
      }
      result = result && getTotalsList()
          .equals(other.getTotalsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRange()) {
        hash = (37 * hash) + RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getRange().hashCode();
      }
      if (getTotalsCount() > 0) {
        hash = (37 * hash) + TOTALS_FIELD_NUMBER;
        hash = (53 * hash) + getTotalsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static kz.kase.iris.model.IrisApiTotals.TotalsReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(kz.kase.iris.model.IrisApiTotals.TotalsReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Ответ с информацией о торгах, сгруппированной за период. 
     * </pre>
     *
     * Protobuf type {@code IRIS.TotalsReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IRIS.TotalsReply)
        kz.kase.iris.model.IrisApiTotals.TotalsReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                kz.kase.iris.model.IrisApiTotals.TotalsReply.class, kz.kase.iris.model.IrisApiTotals.TotalsReply.Builder.class);
      }

      // Construct using kz.kase.iris.model.IrisApiTotals.TotalsReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTotalsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (rangeBuilder_ == null) {
          range_ = null;
        } else {
          range_ = null;
          rangeBuilder_ = null;
        }
        if (totalsBuilder_ == null) {
          totals_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          totalsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return kz.kase.iris.model.IrisApiTotals.internal_static_IRIS_TotalsReply_descriptor;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsReply getDefaultInstanceForType() {
        return kz.kase.iris.model.IrisApiTotals.TotalsReply.getDefaultInstance();
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsReply build() {
        kz.kase.iris.model.IrisApiTotals.TotalsReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public kz.kase.iris.model.IrisApiTotals.TotalsReply buildPartial() {
        kz.kase.iris.model.IrisApiTotals.TotalsReply result = new kz.kase.iris.model.IrisApiTotals.TotalsReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (rangeBuilder_ == null) {
          result.range_ = range_;
        } else {
          result.range_ = rangeBuilder_.build();
        }
        if (totalsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            totals_ = java.util.Collections.unmodifiableList(totals_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.totals_ = totals_;
        } else {
          result.totals_ = totalsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof kz.kase.iris.model.IrisApiTotals.TotalsReply) {
          return mergeFrom((kz.kase.iris.model.IrisApiTotals.TotalsReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(kz.kase.iris.model.IrisApiTotals.TotalsReply other) {
        if (other == kz.kase.iris.model.IrisApiTotals.TotalsReply.getDefaultInstance()) return this;
        if (other.hasRange()) {
          mergeRange(other.getRange());
        }
        if (totalsBuilder_ == null) {
          if (!other.totals_.isEmpty()) {
            if (totals_.isEmpty()) {
              totals_ = other.totals_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTotalsIsMutable();
              totals_.addAll(other.totals_);
            }
            onChanged();
          }
        } else {
          if (!other.totals_.isEmpty()) {
            if (totalsBuilder_.isEmpty()) {
              totalsBuilder_.dispose();
              totalsBuilder_ = null;
              totals_ = other.totals_;
              bitField0_ = (bitField0_ & ~0x00000002);
              totalsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTotalsFieldBuilder() : null;
            } else {
              totalsBuilder_.addAllMessages(other.totals_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        kz.kase.iris.model.IrisApiTotals.TotalsReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (kz.kase.iris.model.IrisApiTotals.TotalsReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private kz.kase.iris.model.IrisApiBase.Range range_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> rangeBuilder_;
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public boolean hasRange() {
        return rangeBuilder_ != null || range_ != null;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range getRange() {
        if (rangeBuilder_ == null) {
          return range_ == null ? kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
        } else {
          return rangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder setRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          range_ = value;
          onChanged();
        } else {
          rangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder setRange(
          kz.kase.iris.model.IrisApiBase.Range.Builder builderForValue) {
        if (rangeBuilder_ == null) {
          range_ = builderForValue.build();
          onChanged();
        } else {
          rangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder mergeRange(kz.kase.iris.model.IrisApiBase.Range value) {
        if (rangeBuilder_ == null) {
          if (range_ != null) {
            range_ =
              kz.kase.iris.model.IrisApiBase.Range.newBuilder(range_).mergeFrom(value).buildPartial();
          } else {
            range_ = value;
          }
          onChanged();
        } else {
          rangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public Builder clearRange() {
        if (rangeBuilder_ == null) {
          range_ = null;
          onChanged();
        } else {
          range_ = null;
          rangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.Range.Builder getRangeBuilder() {
        
        onChanged();
        return getRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      public kz.kase.iris.model.IrisApiBase.RangeOrBuilder getRangeOrBuilder() {
        if (rangeBuilder_ != null) {
          return rangeBuilder_.getMessageOrBuilder();
        } else {
          return range_ == null ?
              kz.kase.iris.model.IrisApiBase.Range.getDefaultInstance() : range_;
        }
      }
      /**
       * <pre>
       * Диапазон записей в ответе.
       * </pre>
       *
       * <code>.IRIS.Range range = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder> 
          getRangeFieldBuilder() {
        if (rangeBuilder_ == null) {
          rangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              kz.kase.iris.model.IrisApiBase.Range, kz.kase.iris.model.IrisApiBase.Range.Builder, kz.kase.iris.model.IrisApiBase.RangeOrBuilder>(
                  getRange(),
                  getParentForChildren(),
                  isClean());
          range_ = null;
        }
        return rangeBuilder_;
      }

      private java.util.List<kz.kase.iris.model.IrisApiTotals.Total> totals_ =
        java.util.Collections.emptyList();
      private void ensureTotalsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          totals_ = new java.util.ArrayList<kz.kase.iris.model.IrisApiTotals.Total>(totals_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.Total, kz.kase.iris.model.IrisApiTotals.Total.Builder, kz.kase.iris.model.IrisApiTotals.TotalOrBuilder> totalsBuilder_;

      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiTotals.Total> getTotalsList() {
        if (totalsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(totals_);
        } else {
          return totalsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public int getTotalsCount() {
        if (totalsBuilder_ == null) {
          return totals_.size();
        } else {
          return totalsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.Total getTotals(int index) {
        if (totalsBuilder_ == null) {
          return totals_.get(index);
        } else {
          return totalsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder setTotals(
          int index, kz.kase.iris.model.IrisApiTotals.Total value) {
        if (totalsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTotalsIsMutable();
          totals_.set(index, value);
          onChanged();
        } else {
          totalsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder setTotals(
          int index, kz.kase.iris.model.IrisApiTotals.Total.Builder builderForValue) {
        if (totalsBuilder_ == null) {
          ensureTotalsIsMutable();
          totals_.set(index, builderForValue.build());
          onChanged();
        } else {
          totalsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder addTotals(kz.kase.iris.model.IrisApiTotals.Total value) {
        if (totalsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTotalsIsMutable();
          totals_.add(value);
          onChanged();
        } else {
          totalsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder addTotals(
          int index, kz.kase.iris.model.IrisApiTotals.Total value) {
        if (totalsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTotalsIsMutable();
          totals_.add(index, value);
          onChanged();
        } else {
          totalsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder addTotals(
          kz.kase.iris.model.IrisApiTotals.Total.Builder builderForValue) {
        if (totalsBuilder_ == null) {
          ensureTotalsIsMutable();
          totals_.add(builderForValue.build());
          onChanged();
        } else {
          totalsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder addTotals(
          int index, kz.kase.iris.model.IrisApiTotals.Total.Builder builderForValue) {
        if (totalsBuilder_ == null) {
          ensureTotalsIsMutable();
          totals_.add(index, builderForValue.build());
          onChanged();
        } else {
          totalsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder addAllTotals(
          java.lang.Iterable<? extends kz.kase.iris.model.IrisApiTotals.Total> values) {
        if (totalsBuilder_ == null) {
          ensureTotalsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, totals_);
          onChanged();
        } else {
          totalsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder clearTotals() {
        if (totalsBuilder_ == null) {
          totals_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          totalsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public Builder removeTotals(int index) {
        if (totalsBuilder_ == null) {
          ensureTotalsIsMutable();
          totals_.remove(index);
          onChanged();
        } else {
          totalsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.Total.Builder getTotalsBuilder(
          int index) {
        return getTotalsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.TotalOrBuilder getTotalsOrBuilder(
          int index) {
        if (totalsBuilder_ == null) {
          return totals_.get(index);  } else {
          return totalsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public java.util.List<? extends kz.kase.iris.model.IrisApiTotals.TotalOrBuilder> 
           getTotalsOrBuilderList() {
        if (totalsBuilder_ != null) {
          return totalsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(totals_);
        }
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.Total.Builder addTotalsBuilder() {
        return getTotalsFieldBuilder().addBuilder(
            kz.kase.iris.model.IrisApiTotals.Total.getDefaultInstance());
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public kz.kase.iris.model.IrisApiTotals.Total.Builder addTotalsBuilder(
          int index) {
        return getTotalsFieldBuilder().addBuilder(
            index, kz.kase.iris.model.IrisApiTotals.Total.getDefaultInstance());
      }
      /**
       * <pre>
       * Список сделок.
       * </pre>
       *
       * <code>repeated .IRIS.Total totals = 2;</code>
       */
      public java.util.List<kz.kase.iris.model.IrisApiTotals.Total.Builder> 
           getTotalsBuilderList() {
        return getTotalsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          kz.kase.iris.model.IrisApiTotals.Total, kz.kase.iris.model.IrisApiTotals.Total.Builder, kz.kase.iris.model.IrisApiTotals.TotalOrBuilder> 
          getTotalsFieldBuilder() {
        if (totalsBuilder_ == null) {
          totalsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              kz.kase.iris.model.IrisApiTotals.Total, kz.kase.iris.model.IrisApiTotals.Total.Builder, kz.kase.iris.model.IrisApiTotals.TotalOrBuilder>(
                  totals_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          totals_ = null;
        }
        return totalsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:IRIS.TotalsReply)
    }

    // @@protoc_insertion_point(class_scope:IRIS.TotalsReply)
    private static final kz.kase.iris.model.IrisApiTotals.TotalsReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new kz.kase.iris.model.IrisApiTotals.TotalsReply();
    }

    public static kz.kase.iris.model.IrisApiTotals.TotalsReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TotalsReply>
        PARSER = new com.google.protobuf.AbstractParser<TotalsReply>() {
      @java.lang.Override
      public TotalsReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TotalsReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TotalsReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TotalsReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public kz.kase.iris.model.IrisApiTotals.TotalsReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_Total_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_Total_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsPeriod_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsPeriod_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsCountRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsCountRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsCountReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsCountReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IRIS_TotalsReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_IRIS_TotalsReply_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025iris_api_totals.proto\022\004IRIS\032\023iris_api_" +
      "base.proto\032\024iris_api_deals.proto\"\253\003\n\005Tot" +
      "al\022\025\n\rinstrument_id\030\001 \001(\005\022\027\n\017instrument_" +
      "code\030\002 \001(\t\022\031\n\005price\030\003 \001(\0132\n.IRIS.Ohlc\022\032\n" +
      "\006volume\030\004 \001(\0132\n.IRIS.Ohlc\022\036\n\007kzt_sum\030\005 \001" +
      "(\0132\r.IRIS.Decimal\022$\n\rkzt_sum_trend\030\006 \001(\013" +
      "2\r.IRIS.Decimal\022\'\n\020kzt_sum_trend_ps\030\007 \001(" +
      "\0132\r.IRIS.Decimal\022\036\n\007usd_sum\030\010 \001(\0132\r.IRIS" +
      ".Decimal\022\022\n\ndeal_count\030\t \001(\005\022\023\n\013order_co" +
      "unt\030\n \001(\005\022 \n\tbid_price\030\013 \001(\0132\r.IRIS.Deci" +
      "mal\022 \n\task_price\030\014 \001(\0132\r.IRIS.Decimal\022\017\n" +
      "\007bid_qty\030\r \001(\005\022\017\n\007ask_qty\030\016 \001(\005\022\035\n\025sessi" +
      "on_internal_code\030\020 \001(\t\"\255\001\n\014TotalsPeriod\022" +
      "\031\n\003day\030\001 \001(\0132\n.IRIS.DateH\000\022\032\n\004week\030\002 \001(\013" +
      "2\n.IRIS.WeekH\000\022\034\n\005month\030\003 \001(\0132\013.IRIS.Mon" +
      "thH\000\022 \n\007quarter\030\004 \001(\0132\r.IRIS.QuarterH\000\022\032" +
      "\n\004year\030\005 \001(\0132\n.IRIS.YearH\000B\n\n\010interval\"Y" +
      "\n\014TotalsFilter\022\"\n\006period\030\001 \001(\0132\022.IRIS.To" +
      "talsPeriod\022%\n\006filter\030\002 \001(\0132\025.IRIS.DealsB" +
      "aseFilter\"8\n\022TotalsCountRequest\022\"\n\006filte" +
      "r\030\001 \001(\0132\022.IRIS.TotalsFilter\"!\n\020TotalsCou" +
      "ntReply\022\r\n\005count\030\001 \001(\005\"n\n\rTotalsRequest\022" +
      "\"\n\006filter\030\001 \001(\0132\022.IRIS.TotalsFilter\022\034\n\005r" +
      "ange\030\002 \001(\0132\013.IRIS.RangeH\000\022\020\n\006bandle\030\003 \001(" +
      "\005H\000B\t\n\007records\"F\n\013TotalsReply\022\032\n\005range\030\001" +
      " \001(\0132\013.IRIS.Range\022\033\n\006totals\030\002 \003(\0132\013.IRIS" +
      ".TotalB\033\n\022kz.kase.iris.model\242\002\004IRISb\006pro" +
      "to3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          kz.kase.iris.model.IrisApiBase.getDescriptor(),
          kz.kase.iris.model.IrisApiDeals.getDescriptor(),
        }, assigner);
    internal_static_IRIS_Total_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_IRIS_Total_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_Total_descriptor,
        new java.lang.String[] { "InstrumentId", "InstrumentCode", "Price", "Volume", "KztSum", "KztSumTrend", "KztSumTrendPs", "UsdSum", "DealCount", "OrderCount", "BidPrice", "AskPrice", "BidQty", "AskQty", "SessionInternalCode", });
    internal_static_IRIS_TotalsPeriod_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_IRIS_TotalsPeriod_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsPeriod_descriptor,
        new java.lang.String[] { "Day", "Week", "Month", "Quarter", "Year", "Interval", });
    internal_static_IRIS_TotalsFilter_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_IRIS_TotalsFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsFilter_descriptor,
        new java.lang.String[] { "Period", "Filter", });
    internal_static_IRIS_TotalsCountRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_IRIS_TotalsCountRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsCountRequest_descriptor,
        new java.lang.String[] { "Filter", });
    internal_static_IRIS_TotalsCountReply_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_IRIS_TotalsCountReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsCountReply_descriptor,
        new java.lang.String[] { "Count", });
    internal_static_IRIS_TotalsRequest_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_IRIS_TotalsRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsRequest_descriptor,
        new java.lang.String[] { "Filter", "Range", "Bandle", "Records", });
    internal_static_IRIS_TotalsReply_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_IRIS_TotalsReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_IRIS_TotalsReply_descriptor,
        new java.lang.String[] { "Range", "Totals", });
    kz.kase.iris.model.IrisApiBase.getDescriptor();
    kz.kase.iris.model.IrisApiDeals.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
